[
{
	"uri": "https://twylie.github.io/viromatch/project_info/version/",
	"title": "Version",
	"tags": [],
	"description": "",
	"content": "Latest (viromatch r.47) The latest version of ViroMatch is provided via DockerHub. To download and install ViroMatch into Docker Desktop service, type the following in your terminal.\ndocker pull twylie/viromatch:latest Once installed, you can\u0026rsquo;t check the version of ViroMatch installed.\ndocker container run twylie/viromatch:latest viromatch --version Results:\nViroMatch (Revision 47) "
},
{
	"uri": "https://twylie.github.io/viromatch/overview/summary/",
	"title": "Pipeline Summary",
	"tags": [],
	"description": "",
	"content": "Abstract Next-generation sequencing (NGS) is a powerful tool for detecting viruses. However, automated interpretation of metagenomic sequences has proven challenging for virus classification due the heterogeneous nature of virus genomics. While software pipelines exist for viral detection, many rely on prohibitive memory and CPU requirements and are not meant for localized computing; others rely on perfect k-mer hashing identities that lack sensitivity. We have produced software in the form of an automated pipeline, called ViroMatch, that takes raw sequencing reads as input and identifies/quantifies viral taxonomy; additionally, we have targeted specific viral species for extended analyses (e.g. variant interpretation). The pipeline is written in Python and is mediated as a DAG (Directed Acyclic Graph) workflow using Snakemake, and supports single or multi-core processing. It can perform iterative nucleotide (BWA-MEM) and translated nucleotide (Diamond) sequence alignments for all known viral reference genomes and can assign viral taxonomy with quantified results. Additionally, we have pre-compiled local viral sequences from NCBI (RefSeq, nt \u0026amp; nr) and associated annotation. For select viruses (e.g. HSV, CMV, EBV), we have implemented downstream viral interpretation steps (e.g. sub-typing, drug resistance), which involves SNV (single nucleotide variant) characterization comparison to known variants we have culled from literature and existing databases. Our databases and companion tools are extensible, and we anticipate periodic updates based on new virus data. ViroMatch is a staple on our work involving genomics-based detection/evaluation of viruses, and we anticipate this resource will be of great interest to others in the scientific and medical community. We provide a Docker image (DockerHub) for ViroMatch, so users will not have to install dependencies.\n T.N. Wylie, K.M. Wylie. \u0026quot;ViroMatch: a computational pipeline for detection of viral reads from complex metagenomic data.\u0026rdquo; ASM Conference on Rapid Applied Microbial Next-Generation Sequencing and Bioinformatic Pipelines December 7\u0026ndash;11, 2020.\n "
},
{
	"uri": "https://twylie.github.io/viromatch/execution/mapping_volumes/",
	"title": "Mapping Docker Volumes",
	"tags": [],
	"description": "",
	"content": "Docker Needs to See Your Files Regardless of whether you use an interactive session or command line execution, you will need to map your local directories to the Docker container. Once inside a container, Docker doesn\u0026rsquo;t understand your local file system unless you explicitly tell it how things are mapped. The volume mapping convention is of the form /local:/container \u0026mdash; i.e. we are mapping a local directory to an alias that will point to the directory within the Docker container, as passed on the command line using the -v option.\nAll local directories that you wish Docker to see must be mapped in this way. See the interactive and command line examples that follow for how Docker -v volume mapping is accomplished.\n "
},
{
	"uri": "https://twylie.github.io/viromatch/download_and_install/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "System Resources In terms of disk space and memory, requirements vary depending on the size of the samples you are processing. We have run ViroMatch on thousands of samples, ranging from 1 million reads to over 200 million reads processed. At lower boundary single core processing, we have processed 30 million reads using 8 GB of memory and 105 GB of disk space and 17:04 runtime. The same data set was parallel processed using 100 cores and 16 GB memory in under 5 hours, same disk space.\nAs a general rule of thumb, we use 16 GB of memory.\nDisk space needed for ViroMatch processing can be considerable (potentially hundreds of gigabytes) depending on the number of reads processed per sample, especially if the --keep option is used to retain all temporary files.\nGeneral resources and benchmarks are outlined on this page as broad guidelines. It is not possible to give exact requirements for resources \u0026mdash; e.g. processing time, memory, disk space \u0026mdash; a priori, as these resources are highly dependent on the viral complexity of the sequencing reads being evaluated. If a very large portion of the reads are viral, then processing will likely take longer and use more resources when compared to a sample with fewer viral reads.\n Example Runtime Breakdown In the table below, we processed 11,829,946 reads using a single core and 16 GB of RAM in a total of 8:00:06 runtime. Each step in the pipeline is broken down and shows how long the step took to complete. Note that some steps produce more output files than other and benefit from parallel processing. This same sample was parallel-processed on the WashU compute1 LSF server using 150 cores (16 GB RAM each) and finished in 2:35:45 runtime. Steps like validate_nuc_nt_mapping and validate_trans_nuc_nr_mapping benefit greatly from parallel-processing, as their processes are computationally intensive across multiple discrete iterations within the step. Results indicate \u0026lt;10K reads (0.008%) were viral in this sample.\n   Pipeline Steps Sub-Steps Total Time (seconds) Hours Minutes Seconds     prep_fastq_files 1 27.85244131 0 0 27   trim_fastq_files 2 5559.313289 1 32 39   blank_eval_filter_low_complexity 2 12.54826808 0 0 12   filter_low_complexity_fastq_files 2 212.6389837 0 3 32   host_screen_mapping 2 2385.155264 0 39 45   host_screen_write_unmapped_bam 2 34.51873302 0 0 34   host_screen_write_unmapped_fastq 2 10.13627338 0 0 10   viral_nuc_mapping 2 175.7005126 0 2 55   viral_nuc_write_unmapped_bam 2 18.99056435 0 0 18   viral_nuc_write_unmapped_fastq 2 18.39612222 0 0 18   viral_nuc_write_mapped_bam 2 24.41263771 0 0 24   viral_nuc_write_mapped_fastq 2 25.48392177 0 0 25   blank_eval_viral_trans_nuc 2 7.917856216 0 0 7   viral_trans_nuc_mapping 2 280.4345899 0 4 40   viral_trans_nuc_daa_to_tsv 2 29.10870218 0 0 29   viral_trans_nuc_extract_mapped_ids 2 26.77536488 0 0 26   viral_trans_nuc_write_mapped_fastq 2 11.67773151 0 0 11   viral_mapped_fastq_merge 2 8.115232706 0 0 8   validate_nuc_nt_mapping 148 10271.54403 2 51 11   validate_nuc_nt_write_mapped_sam 148 1164.741204 0 19 24   validate_nuc_nt_write_unmapped_sam 148 1163.295703 0 19 23   validate_nuc_nt_merge_r1_mapped_sam 1 191.6536033 0 3 11   validate_nuc_nt_merge_r2_mapped_sam 1 8.467573881 0 0 8   validate_nuc_nt_write_r1_unmapped_ids 1 22.6810627 0 0 22   validate_nuc_nt_write_r2_unmapped_ids 1 6.817457676 0 0 6   validate_nuc_nt_write_merged_unmapped_fastq 2 3.277892351 0 0 3   blank_eval_validate_trans_nuc_nr 2 3.754998446 0 0 3   validate_trans_nuc_nr_mapping 80 5631.398906 1 33 51   validate_trans_nuc_nr_mapping_daa_to_tsv 80 792.9289281 0 13 12   validate_trans_nuc_nr_merge_r1_mapped_tsv 1 5.43210721 0 0 5   validate_trans_nuc_nr_merge_r2_mapped_tsv 1 2.971903563 0 0 2   nuc_nt_best_hit_filter_sam 2 97.25468874 0 1 37   trans_nuc_nr_best_hit_filter_tsv 2 84.00837421 0 1 24   nuc_nt_otherseq_hit_report 1 349.1610229 0 5 49   nuc_nt_unknown_hit_report 1 20.51718807 0 0 20   trans_nuc_nr_otherseq_hit_report 1 23.29803538 0 0 23   trans_nuc_nr_unknown_hit_report 1 10.5249989 0 0 10   nuc_nt_best_hit_count_prep 1 6.06182313 0 0 6   trans_nuc_nr_best_hit_count_prep 1 10.92386746 0 0 10   nuc_nt_best_hit_counts 1 37.75414157 0 0 37   trans_nuc_nr_best_hit_counts 1 3.687265873 0 0 3   copy_nuc_nt_report 1 8.1452775 0 0 8   copy_trans_nuc_nr_report 1 0.593919754 0 0 0   copy_nuc_ambiguous_report 1 13.35895181 0 0 13   copy_trans_nuc_ambiguous_report 1 3.470051765 0 0 3    665 28806.90147 8 0 6    Downloads While the ViroMatch code base is hosted at https://github.com/twylie/viromatch, we only support using the official Docker image. Docker Desktop is required on your computer in order to run ViroMatch containers. All required code and third party dependencies are included in the ViroMatch Docker image. You will also need to download required ViroMatch reference genome databases using Globus.\nChecklist:\n Docker Desktop software (download from Docker) ViroMatch Docker image (download from DockerHub) ViroMatch reference genome databases (download using Globus)  Download instructions for these items are outlined in the following pages.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/quick_start/",
	"title": "Quick Start",
	"tags": [],
	"description": "",
	"content": "Section 1 Quick Start This short tutorial explains how to quickly install and test the ViroMatch pipeline. This tutorial assumes that you are already familiar with Docker and using the command line terminal. For more detailed steps involved in installing and running the pipeline, please see Download and Installation.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/project_info/authors/",
	"title": "Authors",
	"tags": [],
	"description": "",
	"content": "Kristine M. Wylie Kristine M. Wylie, Ph.D. / Assistant Professor Department of Pediatrics Division of Infectious Diseases Washington University School of Medicine 660 S. Euclid Avenue, Campus Box 8208 St. Louis, MO 63110\nEmail: kwylie@wustl.edu Twitter: @kwylie5\n Kristine M. Wylie Lab Faculty Bio  Todd N. Wylie Todd N. Wylie / Assistant Professor Department of Pediatrics Washington University School of Medicine 660 S. Euclid Avenue, Campus Box 8208 St. Louis, MO 63110\nEmail: twylie@wustl.edu Twitter: @ToddNWylie\n NakedDNA.org Faculty Bio  "
},
{
	"uri": "https://twylie.github.io/viromatch/overview/snakemake/",
	"title": "Snakemake",
	"tags": [],
	"description": "",
	"content": "The Snakemake Pipeline The ViroMatch pipeline uses Snakemake to organize and run its steps.\nWhat is Snakemake?\n The Snakemake workflow management system is a tool to create reproducible and scalable data analyses. Workflows are described via a human readable, Python based language. They can be seamlessly scaled to server, cluster, grid and cloud environments, without the need to modify the workflow definition. Finally, Snakemake workflows can entail a description of required software, which will be automatically deployed to any execution environment. (Source: Snakemake)\n  Köster, Johannes and Rahmann, Sven. \u0026ldquo;Snakemake - A scalable bioinformatics workflow engine\u0026rdquo;. Bioinformatics 2012.\n All of the steps (rules in Snakemake terminology) in the pipeline are defined and run by Snakemake under-the-hood. That is, you will not have to write Snakemake code or run Snakemake directly; ViroMatch does all of that for you automatically based on the input parameters supplied to the viromatch command.\nWhen ViroMatch is run, the following Snakemake specific files are auto-generated in the --output directory.\ncmd.sh CONFIG.yaml Snakefile These files are the core input required to automatically run a Snakemake instance of the ViroMatch pipeline.\ncmd.sh The cmd.sh file contains the shell commands that ViroMatch runs to automatically launch the Snakemake pipeline. You don\u0026rsquo;t have to run this code manually since ViroMatch runs everything for you. However, if you launched ViroMatch using the --dryrun argument, executing this script will manually run the pipeline.\nCONFIG.yaml The CONFIG.yaml file stores all of the parameters required to run the ViroMatch pipeline. The parameters passed to the viromatch command from the command line are stored here. Other internal variables for running the pipeline are also stored here. This is the configuration file used by Snakemake when running the pipeline. You should not directly edit the configuration file.\nSnakefile The Snakefile is technically the pipeline in terms of code that defines and executes all of the steps in a specific order. This file (along with the configuration file) are used by Snakemake to execute the pipeline. Please note that the Snakefile contains calls to other third-party executables \u0026mdash; e.g. BWA, Samtools, Diamond, etc. Also, ViroMatch specific code is also called in this manner. The Snakefile is essentially the recipe or protocol for the ViroMatch pipeline.\nHere is a list of all of the steps/rules in the Snakefile, ordered by occurrence. See Steps (Snakemake Rules) for a detailed breakdown of all steps and their purpose.\n prep_fastq_files trim_fastq_files blank_eval_filter_low_complexity filter_low_complexity_fastq_files host_screen_mapping host_screen_write_unmapped_bam host_screen_write_unmapped_fastq viral_nuc_mapping viral_nuc_write_unmapped_bam viral_nuc_write_unmapped_fastq viral_nuc_write_mapped_bam viral_nuc_write_mapped_fastq blank_eval_viral_trans_nuc viral_trans_nuc_mapping viral_trans_nuc_daa_to_tsv viral_trans_nuc_extract_mapped_ids viral_trans_nuc_write_mapped_fastq viral_mapped_fastq_merge validate_nuc_nt_mapping validate_nuc_nt_write_mapped_sam validate_nuc_nt_write_unmapped_sam validate_nuc_nt_merge_r1_mapped_sam validate_nuc_nt_merge_r2_mapped_sam validate_nuc_nt_write_r1_unmapped_ids validate_nuc_nt_write_r2_unmapped_ids validate_nuc_nt_write_merged_unmapped_fastq blank_eval_validate_trans_nuc_nr validate_trans_nuc_nr_mapping validate_trans_nuc_nr_mapping_daa_to_tsv validate_trans_nuc_nr_merge_r1_mapped_tsv validate_trans_nuc_nr_merge_r2_mapped_tsv nuc_nt_best_hit_filter_sam trans_nuc_nr_best_hit_filter_tsv nuc_nt_otherseq_hit_report nuc_nt_unknown_hit_report trans_nuc_nr_otherseq_hit_report trans_nuc_nr_unknown_hit_report nuc_nt_best_hit_count_prep trans_nuc_nr_best_hit_count_prep nuc_nt_best_hit_counts trans_nuc_nr_best_hit_counts copy_nuc_nt_report copy_trans_nuc_nr_report copy_nuc_ambiguous_report copy_trans_nuc_ambiguous_report  "
},
{
	"uri": "https://twylie.github.io/viromatch/execution/interactive_docker/",
	"title": "Interactive Docker",
	"tags": [],
	"description": "",
	"content": "Interactive Docker Sessions Docker will allow a user to enter an interactive session (shell) when running a container. In such a scenario, we first enter an interactive instance of the ViroMatch pipeline and then execute our ViroMatch command. This approach can be very useful for interacting directly with the ViroMatch code base, running sub-commands manually, or troubleshooting. When running the pipeline using this method, we see standard output on the screen in real time. Since the session (and window) must remain open throughout pipeline processing, this method is not the best choice for long running jobs or if one is wanting to submit the job within a cluster (instead, see Command Line Docker).\nStarting an Interactive Docker Session Let\u0026rsquo;s take a look at the command to get an interactive session and then we\u0026rsquo;ll breakdown what is going on.\nFor the command below, the \\ character at the end of each line is used to wrap the command for readability. You may also run the command below in your terminal as a single line sans \\ characters.\n docker \\ container run \\ -it \\ -v devViroMatchSMK/t/data:/data \\ -v /tmp/myTest:/outdir \\ -v devViroMatchSMK/t/ncbi/nt:/nt \\ -v devViroMatchSMK/t/ncbi/nr:/nr \\ -v devViroMatchSMK/t/viral/viralfna:/viralfna \\ -v devViroMatchSMK/t/viral/viralfaa:/viralfaa \\ -v devViroMatchSMK/t/host:/host \\ -v devViroMatchSMK/t/adaptor:/adaptor \\ -v devViroMatchSMK/t/taxonomy:/taxonomy \\ twylie/viromatch:latest \\ zsh Command Breakdown\nThe docker container run invocation tells Docker that we are going to be running a container based on an image that is registered (has been pulled) and available on your system. The -it switch tells Docker that this will be an interactive session and we will be viewing standard output. All of the lines with a preceding -v are telling Docker that you are mapping volumes (disks). For example, in the above example, the local /tmp/myTest directory is accessible within the Docker container as /outdir directory. We map all of the directories we need in this manner. The twylie/viromatch:latest call tells Docker to use the ViroMatch image tagged latest for the session. Finally, zsh runs a shell for our interactive session.\nExecuting ViroMatch Running the above command drops us into an interactive Docker session with all of the ViroMatch code base at our disposal. We can now run the ViroMatch pipeline from the command line. A typical ViroMatch command would look like the following.\nviromatch \\ --sampleid \u0026#39;Sample 1\u0026#39; \\ --input /data/test.r1.fastq /data/test.r2.fastq \\ --outdir /outdir/myTest \\ --nt /nt/nt.fofn \\ --nr /nr/nr.fofn \\ --viralfna /viralfna/viral_genomes.fasta \\ --viralfaa /viralfaa/viral_genomes.dmnd \\ --host /host/human.fna \\ --adaptor /adaptor/adaptor.fqtrim \\ --taxid /taxonomy/taxonomy.tsv \\ --keep Command Breakdown\nWe call ViroMatch from the command line and pass required arguments (see Command Line Options) for running the pipeline. The --sampleid argument takes a text string which is used to label the sample during processing. The --input argument can take either a uBAM (unmapped BAM) file as input or, as shown here, paired FASTQ files. The --outdir path is where pipeline output will be written. The --nt and --nr arguments point to the paths for the split NCBI nt/nr reference sequence databases, here passed as file-of-filenames (see Required Arguments). Both --viralfna and --viralfaa point to viral-only databases, nucleotide and translated nucleotide respectively. For host screening, we provide --host with the human reference genome. The --adaptor argument provides the adaptor file used during adaptor trimming. The --taxid argument points to the taxonomy databases used for classifying reads. Finally, --keep is a switch that tells the pipeline to \u0026ldquo;keep\u0026rdquo; the temporary files generated during processing that would be otherwise deleted by default.\nNote in the above command that we are pointing to directories that were originally mapped using Docker\u0026rsquo;s -v argument when we initialized our interactive session. For example, when we ran the Docker command, we used:\ndevViroMatchSMK/t/data:/data\nto map the local directory where our FASTQ files reside to a directory within the container instance called /data. Thus, when telling ViroMatch to look for --input we pointed to the /data directory path on the container side.\nMost errors encountered when running the pipeline stem from malformed volume mappings when executing the docker container run command. Make sure you are exact when providing volume mappings and use fully qualified paths to be explicit.\n ViroMatch Standard Output After running the above commands, standard output from the pipeline begins to be displayed to the screen, describing pipeline progress. Here is a generic example, truncated for brevity.\nBuilding DAG of jobs... Using shell: /bin/bash Provided cluster nodes: 150 Job counts: count\tjobs 1\tall 2\tblank_eval_filter_low_complexity 2\tblank_eval_validate_trans_nuc_nr 2\tblank_eval_viral_trans_nuc 1\tcopy_nuc_ambiguous_report 1\tcopy_nuc_nt_report 1\tcopy_trans_nuc_ambiguous_report 1\tcopy_trans_nuc_nr_report 2\tfilter_low_complexity_fastq_files 2\thost_screen_mapping 2\thost_screen_write_unmapped_bam 2\thost_screen_write_unmapped_fastq 1\tnuc_nt_best_hit_count_prep 1\tnuc_nt_best_hit_counts 2\tnuc_nt_best_hit_filter_sam 1\tnuc_nt_otherseq_hit_report 1\tnuc_nt_unknown_hit_report 1\tprep_fastq_files 1\ttrans_nuc_nr_best_hit_count_prep 1\ttrans_nuc_nr_best_hit_counts 2\ttrans_nuc_nr_best_hit_filter_tsv 1\ttrans_nuc_nr_otherseq_hit_report 1\ttrans_nuc_nr_unknown_hit_report 2\ttrim_fastq_files 148\tvalidate_nuc_nt_mapping 1\tvalidate_nuc_nt_merge_r1_mapped_sam 1\tvalidate_nuc_nt_merge_r2_mapped_sam 148\tvalidate_nuc_nt_write_mapped_sam 2\tvalidate_nuc_nt_write_merged_unmapped_fastq 1\tvalidate_nuc_nt_write_r1_unmapped_ids 1\tvalidate_nuc_nt_write_r2_unmapped_ids 148\tvalidate_nuc_nt_write_unmapped_sam 80\tvalidate_trans_nuc_nr_mapping 80\tvalidate_trans_nuc_nr_mapping_daa_to_tsv 1\tvalidate_trans_nuc_nr_merge_r1_mapped_tsv 1\tvalidate_trans_nuc_nr_merge_r2_mapped_tsv 2\tviral_mapped_fastq_merge 2\tviral_nuc_mapping 2\tviral_nuc_write_mapped_bam 2\tviral_nuc_write_mapped_fastq 2\tviral_nuc_write_unmapped_bam 2\tviral_nuc_write_unmapped_fastq 2\tviral_trans_nuc_daa_to_tsv 2\tviral_trans_nuc_extract_mapped_ids 2\tviral_trans_nuc_mapping 2\tviral_trans_nuc_write_mapped_fastq 666 [Fri Oct 30 19:42:16 2020] rule prep_fastq_files: input: /storage1/fs1/kwylie/Archive/2020_09_21_AHA_RAW_DATA_ONLY/RAW_DATA/gerald_HG3LNDSXY_4_GGTTGGAC-TACAGGAT.bam output: viromatch_results/prep_fastq_files/INPUT.r1.fastq, viromatch_results/prep_fastq_files/INPUT.r2.fastq, viromatch_results/prep_fastq_files/INPUT.cmd jobid: 665 benchmark: viromatch_results/.viromatch/benchmark/INPUT.fastq.benchmark Submitted job 665 with external jobid \u0026#39;Job \u0026lt;207713\u0026gt; is submitted to queue \u0026lt;general\u0026gt;.\u0026#39;. [Fri Oct 30 19:42:46 2020] Finished job 665. 1 of 666 steps (0.15%) done [Fri Oct 30 19:42:46 2020] rule trim_fastq_files: input: viromatch_results/prep_fastq_files/INPUT.r1.fastq output: viromatch_results/trim_fastq_files/INPUT.r1.fqtrim.fastq, viromatch_results/trim_fastq_files/INPUT.r1.fqtrim.report.fastq, viromatch_results/trim_fastq_files/INPUT.r1.fqtrim.fastq.cmd jobid: 661 benchmark: viromatch_results/.viromatch/benchmark/INPUT.r1.fqtrim.fastq.benchmark wildcards: pair=r1 ... For a detailed explanation of all command line arguments for ViroMatch, see Command Line Docker.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/download_and_install/docker/",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": "Docker Containers The ViroMatch pipeline, and all of its underlying code dependencies, are provided as a Docker image. Once you\u0026rsquo;ve installed Docker on your computer and have downloaded the ViroMatch Docker image, you will be able to run pipeline containers.\nWhat are containers?\n \u0026ldquo;A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.\u0026rdquo; (Source: What is a container?)\n Docker containers are an easy, pragmatic way to package and deliver software, and have been widely adopted for local and cloud-bases computing. Using a Docker image means we\u0026rsquo;ve done all of the setup (dependency installation, environment variables, etc.) for you! However, you will need to install Docker on your system before taking advantage of the ViroMatch pipeline image.\nTo install Docker Desktop for your particular system, please visit:\nGet started with Docker  and download the appropriate version for your computer. Follow Docker\u0026rsquo;s instructions for installing and starting Docker Desktop.\nDocker\u0026rsquo;s own tutorials are a good place to start familiarizing yourself with Docker and running Docker containers.\nPlay with Docker  An in depth overview of Docker is beyond the scope of this documentation; however, there are many other resources, tutorials, and walk-throughs related to Docker online. We will cover Docker basics for running the ViroMatch pipeline throughout this documentation.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/download_and_install/",
	"title": "Download and Installation",
	"tags": [],
	"description": "",
	"content": "Section 2 Download and Installation The following section outlines in detail how to download and install the ViroMatch pipeline and associated required reference genome databases. At the end of this section, you should have ViroMatch installed and ready to run on your system.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/project_info/license/",
	"title": "License",
	"tags": [],
	"description": "",
	"content": "How is ViroMatch licensed? Web Site Content The content of the ViroMatch web site and associated documentation is copyright (C) 2019—2021 T.N. Wylie and K.M. Wylie, and is released under Creative Commons:\nAttribution-NoDerivatives 4.0 International license.\nSource Code The ViroMatch source code (as provided by our Docker image) and associated databases are licensed under the MIT License.\nThe MIT License\nBegin license text.\nCopyright (C) 2019\u0026ndash;2021 T.N. Wylie and K.M. Wylie.\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026ldquo;Software\u0026rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \u0026ldquo;AS IS\u0026rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nEnd license text.\nInquiries Questions regarding ViroMatch licensing and/or distribution may be addressed to:\nTodd N. Wylie / Assistant Professor Department of Pediatrics Washington University School of Medicine 660 S. Euclid Avenue, Campus Box 8208 St. Louis, MO 63110 Email: twylie@wustl.edu\n"
},
{
	"uri": "https://twylie.github.io/viromatch/overview/steps/",
	"title": "Steps in the Pipeline",
	"tags": [],
	"description": "",
	"content": "ViroMatch Rulegraph of Steps The following rulegraph was produced by Snakemake and shows the general directed acyclic graph for the steps in the pipeline. Steps are described in detail below.\nDownload PDF version of rulegraph.   Steps (Snakemake Rules) Here is a list of all of the steps/rules in ViroMatch\u0026rsquo;s Snakefile, ordered by occurrence; each step of the pipeline and its purpose is outlined in detail.\n1. prep_fastq_files The pipeline accepts a uBAM file or paired FASTQ files as --input from the command line. This step prepares the input file for downstream processing. If a uBAM file is supplied, it is converted to paired FASTQ files. Paired FASTQ input files are simply linked into the output directory for processing.\n2. trim_fastq_files The paired FASTQ files are adaptor trimmed in this step. Reads will be trimmed for adaptor (--adaptor), sequences will be trimmed/revised based on end-quality (--endqual), reads will be filtered based on the percent of N\u0026rsquo;s allowed post-trimming (--minn), and too-short reads will be removed (--readlen).\n3. blank_eval_filter_low_complexity This step evaluates the resultant FASTQ files produced by the trim_fastq_files step to see if the FASTQ files are blank or have sequence entries present. Some of the executables in the pipeline will not accept \u0026ldquo;blank\u0026rdquo; FASTQ files, so this step prepares the next step in the pipeline if the files have no entries.\n4. filter_low_complexity_fastq_file The trimmed FASTQ files are evaluated for low-complexity in this step. Low-complexity bases are \u0026ldquo;hard masked\u0026rdquo; as N\u0026rsquo;s in this step. Reads will also be filtered based on the percent of Ns allowed post-trimming (--minn).\n5. host_screen_mapping The trimmed and masked paired FASTQ sequences are mapped by nucleotide alignment to a reference host (--host) genome in this step.\n6. host_screen_write_unmapped_bam For the paired FASTQ files, the unmapped reads are partitioned into their own BAM files.\n7. host_screen_write_unmapped_fastq The unmapped host BAM files are converted to FASTQ format.\n8. viral_nuc_mapping The unmapped host FASTQ files (reads trimmed, masked, and did not map to host genome) are mapped by nucleotide alignment to a virus-only reference database in this step of the pipeline. Reads that map to this database have putative viral identities, but will undergo validation in later steps of the pipeline.\n9. viral_nuc_write_unmapped_bam Reads that were not mapped to the viral-only database are partitioned into their own BAM files.\n10. viral_nuc_write_unmapped_fastq Reads that were not mapped to the viral-only database are written to their own FASTQ files, from the unmapped BAM files.\n11. viral_nuc_write_mapped_bam Reads that were mapped to the viral-only database are partitioned into their own BAM files.\n12. viral_nuc_write_mapped_fastq Reads that were mapped to the viral-only database are written to their own FASTQ files, from the mapped BAM files.\n13. blank_eval_viral_trans_nuc This step evaluates the resultant FASTQ files produced by the viral nucleotide mapping steps to see if the FASTQ files are blank or have sequence entries present. Some of the executables in the pipeline will not accept \u0026ldquo;blank\u0026rdquo; FASTQ files, so this step prepares the next step in the pipeline if the files have no entries.\n14. viral_trans_nuc_mapping The reads (unmapped FASTQ files) that did not map to the viral-only databases by nucleotide alignment are aligned to a six-frame translated version of the same viral-only database by translated nucleotide alignment. Reads that did not map before may align in this manner given the greater sensitivity of the translated alignment approach.\n15. viral_trans_nuc_daa_to_tsv We convert the translated alignment results from their binary format to a human readable tab-delimited format.\n16. viral_trans_nuc_extract_mapped_ids We require the read ids in list format for the reads that mapped by translated alignment. This step collects the read ids for translated alignment mapped reads.\n17. viral_trans_nuc_write_mapped_fastq Based on the list of read ids for translated alignment mapped reads, we can write FASTQ files for just the reads that were mapped by translated alignment.\n18. viral_mapped_fastq_merge In this step, we merge all of the reads that were mapped by (1) nucleotide alignment and (2) translated nucleotide alignment. Cumulatively, these reads are representative of all of the putative viral identity reads from the original sequences input into the pipeline; however, these candidate reads must be further validated by the pipeline.\n19. validate_nuc_nt_mapping The candidate viral reads in the merged FASTQ files are now mapped by nucleotide alignment to all of the references in the NCBI nt database. While a read may have a good hit to the viral-only reference database, it may have a better or equally good hit to a non-viral reference in NCBI nt. Aligning to NCBI nt would be prohibitively slow for all input reads, so we only do this validation step for candidate reads that aligned to the virus-only database. NCBI nt is too large to index for alignment, so we have split nt into multiple indexed reference databases for independent alignment. A candidate read will be aligned to all of the split nt databases and a best-hit will be determined by the pipeline downstream.\n20. validate_nuc_nt_write_mapped_sam All of the split nt alignment BAM files are converted to SAM format for the mapped reads in this step.\n21. validate_nuc_nt_write_unmapped_sam All of the split nt alignment BAM files are converted to SAM format for the unmapped reads in this step.\n22. validate_nuc_nt_merge_r1_mapped_sam For the read-1 FASTQ reads, all of the split nt SAM files for the mapped reads are merged into a single SAM file that is sorted by read id names. The SAM file needs to be sorted by read names because the pipeline\u0026rsquo;s downstream best hit logic evaluates reads by read blocks: blocks of hits for the same read id.\n23. validate_nuc_nt_merge_r2_mapped_sam For the read-2 FASTQ reads, all of the split nt SAM files for the mapped reads are merged into a single SAM file that is sorted by read id names. The SAM file needs to be sorted by read names because the pipeline\u0026rsquo;s downstream best hit logic evaluates reads by read blocks: blocks of hits for the same read id.\n24. validate_nuc_nt_write_r1_unmapped_ids For the read-1 FASTQ reads, we require the read ids in list format for the candidate viral reads that were not mapped to NCBI nt. This step collects the read ids for NCBI nt unmapped reads.\n25. validate_nuc_nt_write_r2_unmapped_ids For the read-2 FASTQ reads, we require the read ids in list format for the candidate viral reads that were not mapped to NCBI nt. This step collects the read ids for NCBI nt unmapped reads.\n26. validate_nuc_nt_write_merged_unmapped_fastq In this step, based on the unmapped read ids collected in previous steps, we pull the candidate reads that did not map to NCBI nt references and merge them into FASTQ files, one for each respective original read pair.\n27. blank_eval_validate_trans_nuc_nr This step evaluates the resultant FASTQ files produced by the NCBI nt mapping steps to see if the FASTQ files are blank or have sequence entries present. Some of the executables in the pipeline will not accept \u0026ldquo;blank\u0026rdquo; FASTQ files, so this step prepares the next step in the pipeline if the files have no entries.\n28. validate_trans_nuc_nr_mapping The FASTQ files (from step #26) contain the viral candidate reads that did not map to the NCBI nt database by nucleotide alignment. These reads will now be mapped to NCBI nr by translated nucleotide alignment. Reads that did not map before may align in this manner given the greater sensitivity of the translated alignment approach. Aligning to NCBI nr would be prohibitively slow for all input reads, so we only do this validation step for candidate reads that initially aligned to the virus-only database, but did not align to NCBI nt. NCBI nr is too large to index for alignment, so we have split nr into multiple indexed reference databases for independent alignment. A candidate read will be aligned to all of the split nr databases and a best-hit will be determined by the pipeline downstream.\n29. validate_trans_nuc_nr_mapping_daa_to_tsv We convert the translated alignment results from their binary format to a human readable tab-delimited format.\n30. validate_trans_nuc_nr_merge_r1_mapped_tsv For the read-1 FASTQ reads, all of the split nr TSV files for the mapped reads are merged into a single TSV file that is sorted by read id names. The TSV file needs to be sorted by read names because the pipeline\u0026rsquo;s downstreamn best hit logic evaluates reads by read blocks: blocks of hits for the same read id.\n31. validate_trans_nuc_nr_merge_r2_mapped_tsv For the read-2 FASTQ reads, all of the split nr TSV files for the mapped reads are merged into a single TSV file that is sorted by read id names. The TSV file needs to be sorted by read names because the pipeline\u0026rsquo;s downstream best hit logic evaluates reads by read blocks: blocks of hits for the same read id.\n32. nuc_nt_best_hit_filter_sam In this step, the candidate viral reads that mapped to NCBI nt are evaluated. For each candidate read, all of the associated hits (read block) for the read are evaluated and a best representative hit is chosen. It is during this step that the pipeline writes sanity files which describe the pass/fail status for all of the hits evaluated. A SAM file is written for the chosen viral best hits.\n33. trans_nuc_nr_best_hit_filter_tsv In this step, the candidate viral reads that mapped to NCBI nr are evaluated. For each candidate read, all of the associated hits (read block) for the read are evaluated and a best representative hit is chosen. It is during this step that the pipeline writes sanity files which describe the pass/fail status for all of the hits evaluated. A TSV file is written for the chosen viral best hits.\n34. nuc_nt_otherseq_hit_report The pipeline now generates a report for hits to other sequences taxonomy based on the sanity reports from step #32.\n35. nuc_nt_unknown_hit_report The pipeline now generates a report for hits to unknown taxonomy based on the sanity reports from step #32.\n36. trans_nuc_nr_otherseq_hit_report The pipeline now generates a report for hits to other sequences taxonomy based on the sanity reports from step #33.\n37. trans_nuc_nr_unknown_hit_report The pipeline now generates a report for hits to unknown taxonomy based on the sanity reports from step #33.\n38. nuc_nt_best_hit_count_prep In this step, the nucleotide alignment SAM files from step #32 that contain the best viral hits against NCBI nt are combined into a data matrix that includes associated taxonomy for reporting purposes.\n39. trans_nuc_nr_best_hit_count_prep In this step, the translated nucleotide alignment TSV files from step #33 that contain the best viral hits against NCBI nt are combined into a data matrix that includes associated taxonomy for reporting purposes.\n40. nuc_nt_best_hit_counts This step generates a report file that describes viral read counts based on nucleotide alignments at genus, species, and full lineage levels.\n41. trans_nuc_nr_best_hit_counts This step generates a report file that describes viral read counts based on translated nucleotide alignments at genus, species, and full lineage levels.\n42. copy_nuc_nt_report The report from step #40 is copied into the main output directory for review.\n43. copy_trans_nuc_nr_report The report from step #41 is copied into the main output directory for review.\n44. copy_nuc_ambiguous_report The report from steps #34 and #35 are copied into the main output directory for review.\n45. copy_trans_nuc_ambiguous_report The report from steps #36 and #37 are copied into the main output directory for review.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/execution/cli_docker/",
	"title": "Command Line Docker",
	"tags": [],
	"description": "",
	"content": "Command Line Docker Execution We can run ViroMatch from an interactive container as a two-step process. Here, we outline how to do both steps at once.\nLet\u0026rsquo;s take a look at the execution command and then we\u0026rsquo;ll breakdown what\u0026rsquo;s going on. From a terminal, we would type the following to call the Docker container and run ViroMatch.\ndocker \\ container run \\ -it \\ -v devViroMatchSMK/t/data:/data \\ -v /tmp/myTest:/outdir \\ -v devViroMatchSMK/t/ncbi/nt:/nt \\ -v devViroMatchSMK/t/ncbi/nr:/nr \\ -v devViroMatchSMK/t/viral/viralfna:/viralfna \\ -v devViroMatchSMK/t/viral/viralfaa:/viralfaa \\ -v devViroMatchSMK/t/host:/host \\ -v devViroMatchSMK/t/adaptor:/adaptor \\ -v devViroMatchSMK/t/taxonomy:/taxonomy \\ twylie/viromatch:latest \\ viromatch \\ --sampleid \u0026#39;Sample 1\u0026#39; \\ --input /data/test.r1.fastq /data/test.r2.fastq \\ --outdir /outdir/myTest \\ --nt /nt/nt.fofn \\ --nr /nr/nr.fofn \\ --viralfna /viralfna/viral_genomes.fasta \\ --viralfaa /viralfaa/viral_genomes.dmnd \\ --host /host/human.fna \\ --adaptor /adaptor/adaptor.fqtrim \\ --taxid /taxonomy/taxonomy.tsv \\ --keep All of the arguments are the same as detailed in Interactive Docker Session, but we\u0026rsquo;ve essentially combined the two steps. Running the above command still produces standard output as the pipeline progresses, but is now displayed in our terminal shell and not an interactive Docker shell. Once the pipeline has finished, Docker will discretely terminate the underlying container shell.\nIt is also possible to execute a Docker job from the command line and run it completely in the background. Just add the -d switch to your docker command to detach the job. You will be given a job ID to monitor the job. This is the preferred method for long-running ViroMatch jobs on a local system.\n "
},
{
	"uri": "https://twylie.github.io/viromatch/execution/",
	"title": "Running ViroMatch",
	"tags": [],
	"description": "",
	"content": "Section 3 Running ViroMatch There are two general ways to interact with the ViroMatch image using Docker: 1) as an interactive session; 2) command line execution. Both approaches will produce the same results and preference is up to the user. We will focus on the command line approach for the majority of this documentation, as this method allows for long-running jobs without having to keep an interactive session running on your system.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/download_and_install/download_viromatch/",
	"title": "Download ViroMatch",
	"tags": [],
	"description": "",
	"content": "ViroMatch Docker Image Once you\u0026rsquo;ve installed Docker Desktop (and the Docker service is running on your system) you will be able to download the ViroMatch Docker image. To test that Docker Desktop is installed and running correctly on your computer, you may type the following in a terminal.\ndocker --version Results:\nDocker version 19.03.12, build 48a66213fe The latest version of ViroMatch is provided via DockerHub. Once you\u0026rsquo;ve installed Docker Desktop (and the Docker service is running on your system) you will be able to download and run the ViroMatch Docker image. Specifically, you want the viromatch:latest image.\nDownload ViroMatch  Alternatively, to download and install ViroMatch into Docker service, type the following in your terminal.\ndocker pull twylie/viromatch:latest Results:\nlatest: Pulling from twylie/viromatch Digest: sha256:71547c20dbdd6c14f67b661f3c88b4b902675df642004a1a90c57f1223fdabb2 Status: Image is up to date for twylie/viromatch:latest docker.io/twylie/viromatch:latest The command above will contact DockerHub to download and register the ViroMatch image on your system. This process can take several minutes. Once installed, you will be able to run ViroMatch pipeline containers on your computer. Type the following to see if your download was successful.\ndocker images twylie/virmatch:latest Results:\nREPOSITORY TAG IMAGE ID CREATED SIZE twylie/viromatch latest de2636b2ff1e 3 days ago 1.56GB If you see something that looks similar to the above output, you\u0026rsquo;ve downloaded and registered the ViroMatch docker image on your system.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/download_and_install/databases/",
	"title": "Databases",
	"tags": [],
	"description": "",
	"content": "Downloading Required ViroMatch Databases As outlined in Input File Types, you will need to supply required reference genome databases in order to run the ViroMatch pipeline. These resources have already been indexed and are ready for processing, but you will need to download all of the files first.\nWe provide file access and transfer through Globus Connenct.\nWhat is Globus?\n Globus Connect enables your system to use the Globus file transfer and sharing service. It makes it simple to create a Globus endpoint on practically any system, from a personal laptop to a national supercomputer. Globus Connect is free to install and use for users at non-profit research and education institutions. Globus Connect Versions (Source: Globus Connect)\n Globus Connect Personal is designed for use by a single user on a personal machine and is free for users at non-profit research and education institutions. Once Globus Connect Personal is installed and you are logged in, you may click on the link below to download the ViroMatch databases.\nDownload ViroMatch Databases Using Globus  The main sub-directories for download are listed below, organized by database type. For detailed information on each sub-directory\u0026rsquo;s files, see the corresponding Input File Type.\n   Sub-Directory Input File Type     adaptor/ Adaptor File   host/ Host File   ncbi/nr/ NCBI nr Files   ncbi/nt/ NCBI nt Files   taxonomy/ Taxid File   viral-only/nuc/ Viralfna File   viral-only/trans_nuc/ Viralfaa File    You will need all of the underlying database files in these sub-directories in order to run the pipeline. Be aware the databases are quite large in cumulative size (~860 GB).\n"
},
{
	"uri": "https://twylie.github.io/viromatch/project_info/funding/",
	"title": "Funding",
	"tags": [],
	"description": "",
	"content": "The viral sequence identification approach used in ViroMatch was formulated during the Human Microbiome Project (HMP) by Kristine M. Wylie and has undergone continuous revision and further development over the years.\nRecently, the following grants have provided funding in part for development of ViroMatch.\nNational Institute of Health Clinical and Translational Science  NIH CTSA UL1TR002345 Institute of Clinical and Translational Sciences Award (ICTS) ICTS GRANT ID#: CTRFP2019-17 (CSTA1215) \u0026quot;Tools for Automated Interpretation of Viruses from Next-Generation Sequencing Data\u0026rdquo; ICTS/Washington University School of Medicine PI: Todd N. Wylie\n National Institute of Health Research Project (R01)  1R01HD095986 \u0026quot;The Vaginal Microbiome, Maternal Response, and Preterm Birth\u0026rdquo; Washington University School of Medicine PIs: Molly Stout; Kristine M. Wylie\n "
},
{
	"uri": "https://twylie.github.io/viromatch/overview/tools/",
	"title": "Third-Party Tools",
	"tags": [],
	"description": "",
	"content": "Tools Used by ViroMatch ViroMatch relies on third-party bioinformatics tools at various points in the pipeline. The table below lists the major third-party tools and how they are used.\n   Software Version License Link ViroMatch Usage     BWA 0.7.17-r1198-dirty GNU General Public License version 3.0 (GPLv3), MIT License http://bio-bwa.sourceforge.net/ Used for nucleotide alignments.   Biopython 1.78 Biopython License Agreement https://biopython.org/ Used for FASTA/FASTQ handling.   Diamond diamond v0.9.29.130 GPL-3.0 License http://www.diamondsearch.org/ Used for translated nucleotide alignments.   Pandas 1.1.2 BSD-licensed library https://pandas.pydata.org/ Pandas used for data handling and reporting.   Python Python 3.7.5 Python License Agreement (GPL-compatible) https://www.python.org/ ViroMatch is written in Python.   Samtools samtools 1.9 The MIT License http://www.htslib.org/ Samtools is used for SAM/BAM handling.   Snakemake 5.25.0 The MIT License https://snakemake.readthedocs.io/ Snakemake is used for pipeline organization and execution.   fqtrim v0.9.7 Artistic License 2.0 https://ccb.jhu.edu/software/fqtrim/ Used for adaptor and quality trimming; also, short read filtering.   seqtk 1.3-r115-dirty The MIT License https://github.com/lh3/seqtk The seqtk package is used to extract specific reads from FASTQ files.   vsearch v2.15.0_linux_x86_64 GNU General Public License version 3 or BSD 2-clause license (dual-licensed) https://github.com/torognes/vsearch The vsearch package is used for low-complexity read masking/filtering.    "
},
{
	"uri": "https://twylie.github.io/viromatch/execution/cli_args/",
	"title": "Command Line Arguments",
	"tags": [],
	"description": "",
	"content": "Terse Usage Statement Typing viromatch from the command line will display a terse usage statement.\ndocker container run twylie/viromatch:latest viromatch Results:\nusage: viromatch [-h] [--version] [--keep] [--dryrun] [--smkcores INT] [--endqual INT] [--minn INT] [--phred 33|64] [--readlen INT] [--pid FLOAT] [--pidprox FLOAT] [--bsize INT] [--bitprox INT] [--mts INT] [--evalue FLOAT] --sampleid STR --input FILE [FILE ...] --outdir DIR --nt FILE [FILE ...] --nr FILE [FILE ...] --viralfna FILE --viralfaa FILE --host FILE --adaptor FILE --taxid FILE [--wustlconfig FILE] viromatch: error: the following arguments are required: --sampleid, --input, --outdir, --nt, --nr, --viralfna, --viralfaa, --host, --adaptor, --taxid Detailed Usage Statement You may get a detailed list of command line options using the --help switch from the command line.\ndocker container run twylie/viromatch:latest viromatch --help Results:\nusage: viromatch [-h] [--version] [--keep] [--dryrun] [--smkcores INT] [--endqual INT] [--minn INT] [--phred 33|64] [--readlen INT] [--pid FLOAT] [--pidprox FLOAT] [--bsize INT] [--bitprox INT] [--mts INT] [--evalue FLOAT] --sampleid STR --input FILE [FILE ...] --outdir DIR --nt FILE [FILE ...] --nr FILE [FILE ...] --viralfna FILE --viralfaa FILE --host FILE --adaptor FILE --taxid FILE [--wustlconfig FILE] Read-based virome characterization pipeline. optional arguments: -h, --help Display the extended usage statement. --version Display the software version number. --keep Retain intermediate files. --dryrun Preps pipeline but no execution. --smkcores INT Number of CPU cores for Snakemake. [1] --endqual INT Trim 3\u0026#39;-end when quality drops below value. [10] --minn INT Max percent of Ns allowed post-trimming. [50] --phred 33|64 Choose phred-33 or phred-64 quality encoding. [33] --readlen INT Minimum read length after trimming. [50] --pid FLOAT Max percent id variance for nucleotide hits. [0.15] --pidprox FLOAT Max proximal percent id variance for nucleotide hits. [0.04] --bsize INT Buffer size for sorting (Gb). [1] --bitprox INT Max proximal bitscore for translated hits. [1] --mts INT Translated nucleotide max-target-seqs. [5] --evalue FLOAT Translated nucleotide max-expect-value. [0.001] required: --sampleid STR Label or id for sample. --input FILE [FILE ...] Path to single input BAM or paired FASTQ file(s). --outdir DIR Path to directory for writing output. --nt FILE [FILE ...] NCBI nt nucleotide FASTA file(s) or NT.fofn file. --nr FILE [FILE ...] NCBI nr protein FASTA file(s) or NR.fofn file. --viralfna FILE Viral identity (indexed) nucleotide FASTA file. --viralfaa FILE Viral identity (indexed) translated FASTA file. --host FILE Host (indexed) FASTA file for host screening. --adaptor FILE File with adapter sequences to trim. --taxid FILE Taxonomy ID lookup file. Washington University only (LSF cluster submission): --wustlconfig FILE Path to config file for WUSTL LSF parallel processing. Command Line Options Details for the command line options are outlined below. Some arguments are required while others are optional.\nRequired Arguments    Argument Type Description     --sampleid string User defined text for sample identification. This text is used in the reports to help identify/track the sample.   --input file path(s) Path to the input read file(s). A user may provide either (1) a single input uBAM file or (2) paired FASTQ files. If a uBAM file is provided, it will be converted to paired FASTQ files for downstream processing. If paired FASTQ files are provided, the R1-file should be first followed by the R2-file, space delimited.   --outdir dir path Path to the directory for writing output. All ViroMatch ouput will be written here for a given instance of the pipeline.   --nt file path(s) Space delimited list of paths to ViroMatch\u0026rsquo;s split NCBI nt nucleotide indexed FASTA files. Alternatively, a file with paths to the files, one per line, can be supplied instead, provided the file has a .fofn suffix \u0026mdash; e.g. NT.fofn file.   --nr file path(s) Space delimited list of paths to ViroMatch\u0026rsquo;s split NCBI nr nucleotide indexed FASTA files. Alternatively, a file with paths to the files, one per line, can be supplied instead, provided the file has a .fofn suffix \u0026mdash; e.g. NR.fofn file.   --viralfna file path Path to ViroMatch\u0026rsquo;s viral identity nucleotide indexed FASTA file. Putative viral identities come from this database prior to extended validation alignments.   --viralfaa file path Path to ViroMatch\u0026rsquo;s viral identity translated nucleotide indexed FASTA file. Putative viral identities come from this database prior to extended validation alignments.   --host file path Path to ViroMatch\u0026rsquo;s host indexed FASTA file used for host screening. By default we provide an indexed version of the human reference genome.   --adaptor file path Path to a file with adapter sequences, one per line, used for read trimming.   --taxid file path Path to ViroMatch\u0026rsquo;s taxonomy database. This file provides NCBI-based taxonomy and lineages based on NCBI taxon ids.    Optional Arguments    Argument Type Default Description     --help switch  This switch will display the extended usage statement for ViroMatch command line parameters. Using this switch obviates pipeline execution.   --version switch  This switch will print the version id of the ViroMatch software being run. Using this switch obviates pipeline execution.   --keep switch  ViroMatch generates many intermediate files that are marked as temporary in the pipeline. By default, these files are deleted on the file system once they are no longer required for generating downstream output. Using the --keep switch will retain all of the temporary files produced by the pipeline. Please note, keeping these files will increase overall disk space consumption.   --dryrun switch  Running this switch will create the ViroMatch output directory and write all of the files needed to run the pipeline; however, using this switch obviates pipeline execution. This can be useful for troubleshooting or reviewing setup prior to running the pipeline. The pipeline can still be executed by manually running the cmd.sh script in the output directory.   --smkcores integer 1 For systems with multiple processors, this value tells ViroMatch how many CPU cores to use in parallel, when possible. ViroMatch uses Snakemake for pipeline execution, which will automatically handle parallel steps. This value directly feeds Snakemake\u0026rsquo;s --cores option. Note: This is not the same as parallel processing by submitting jobs to a compute cluster \u0026mdash; e.g. LSF jobs.   --endqual integer 10 During the adaptor trimming portion of the pipeline, we also trim the 3\u0026rsquo;-end of reads when base quality values drop below the --endqual value.   --minn integer 50 After trimming and low-complexity masking, a read is evaluated for the maximum percent of N\u0026rsquo;s allowed across the read. If the percent of N\u0026rsquo;s is greater than the --minn value then the read is failed and not used downstream. Default is 50% of a read\u0026rsquo;s length.   --phred 33, 64 33 This value tells the pipeline what encoding the input FASTQ files uses. You may choose phred-33 [33] or phred-64 [64] quality encoding. Default is phred-33 encoding.   --readlen integer 50 After trimming, a read is evaluated for post-processed read length. The minimum read length (in basepairs) allowable after trimming is set by the --readlen value. Default is 50 bp or greater to use a read downstream, else the read is failed.   --pid float 0.15 During the best-hit filter logic step of the pipeline, a nucleotide alignment is evaluated for the percent nucleotide variance a read (query) has compared to its reference (subject). The --pid value sets the maximum percent id variance allowable for a hit. Default is any hit with over 15% variance is considered failed.   --pidprox float 0.04 During the best-hit filter logic step of the pipeline, secondary (non-best-hit) nucleotide alignments are evaluated for their percent nucleotide variance when compared to the best hit for a read. The --pidprox value sets the maximum percent id variance allowable for a secondary hit. Default is any secondary/proximal hit with over 4% variance is considered failed.   --bsize integer 1 During the best-hit filter logic step of the pipeline, reads are evaluated in a read block based on alignments sorted by read id. The --bsize option sets the maximum buffer size (Gb) for sorting in memory, before an external sort buffers to disk. If the sort exceeds the --bsize limit, it will buffer to disk. As the sort size will almost always be larger than convential memory, we can enforce disk buffering by setting --bsize low, such as the default of 1 GB.   --bitprox integer 1 During the best-hit filter logic step of the pipeline, secondary (non-best-hit) translated nucleotide alignments are evaluated for their bitscore when compared to the best hit for a read. The --bitprox value sets the maximum btiscore distance allowable for a secondary hit. Default is any secondary/proximal hit with a bitscore over 1 is considered failed.   --mts integer 5 For translated nucleotide alignments, the maximum number of target sequences per read to report alignments. Reads are evaluated in a /read-block/ based on alignments sorted by read id. Default is top 5 alignments per read.   --evalue float 0.001 For translated nucleotide alignments, the maximum expected value (e-value) to report an alignment. Default e-value is very conservative (0.001); increasing the e-value reports more questionable alignments.          Washington University Specific Arguments These options are only available to those running ViroMatch at Washington University School of Medicine through the compute1 high performance computing server.\n    Argument Type Description     --wustlconfig file path Path to a YAML configuration file used for WUSTL LSF job parallel processing. Variables provided in this file are used for LSF job submission configuration. See Wustlconfig File for more details on configuration file format.     "
},
{
	"uri": "https://twylie.github.io/viromatch/overview/",
	"title": "Pipeline Overview",
	"tags": [],
	"description": "",
	"content": "Section 4 Pipeline Overview In this section, we will outline all of the steps in the ViroMatch pipeline. We will also discuss how critical decisions are made at various steps. At the end of this section, you should have a basic idea of what the pipeline is doing and how it is being done.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/project_info/disclaimer/",
	"title": "Disclaimer",
	"tags": [],
	"description": "",
	"content": " This resource is intended for purely research purposes. It should not be used for emergencies or medical or professional advice.\n THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n "
},
{
	"uri": "https://twylie.github.io/viromatch/project_info/",
	"title": "Project Info",
	"tags": [],
	"description": "",
	"content": "Section 5 Project Info This section collects general information about the ViroMatch project \u0026mdash; e.g. contact info, funding, and licensing.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/overview/file_types/",
	"title": "Input File Types",
	"tags": [],
	"description": "",
	"content": "Pipeline Input Files    Argument Type Description     --input file path(s) Path to the input read file(s). A user may provide either (1) a single input uBAM file or (2) paired FASTQ files. If a uBAM file is provided, it will be converted to paired FASTQ files for downstream processing. If paired FASTQ files are provided, the R1-file should be first followed by the R2-file, space delimited.    FASTQ Files FASTQ is an extension of the venerable FASTA sequence format first described by P. Cock, et al. FASTQ combines sequence and quality information in the same file format. ViroMatch accepts paired FASTQ files \u0026mdash; i.e. two FASTQ files from the same sample with read-1 and read-2 pairs broken out, ordered by corresponding read pair ids \u0026mdash; as --input when running the pipeline.\nFor FASTQ support, ViroMatch requires that you pass two FASTQ files whose order retains corresponding read pair ids. For example, read_1/1 and read_1/2 should be the first entries in the FASTQ files, respectively.\n Within the larger ViroMatch command, the --input argument for FASTQ files would look something like this.\nviromatch --input example.r1.fastq example.r2.fastq The first 2 entries of example.r1.fastq file:\n@D00170:57:CA2R8ANXX:4:1101:10005:81687/1 GTTTCTACCATGTGTACTGGAATTCTTATAGTTCTAGCTTGATCTGCTATTGCTCTTGTAATAGCTTGTCTTATCCACCATGTTGCATAAGTACTAAATTTAAAACCTTTAGTATAATCAAACTTC + BBBBBF/\u0026lt;B/\u0026lt;FBFF\u0026lt;FF///\u0026lt;FB//BB/FFFFFFFBFF///\u0026lt;FF\u0026lt;FFF/FFFB/BFF\u0026lt;F/FF/FFFFFF\u0026lt;F\u0026lt;FFFF//\u0026lt;FFF\u0026lt;\u0026lt;FF/F//\u0026lt;FF//\u0026lt;BF/\u0026lt;\u0026lt;FFFFF/FFF/FFFFBF/FF\u0026lt;BB\u0026lt;/ @D00170:57:CA2R8ANXX:4:1101:10024:71656/1 ACACTGCTTCACCCACTCCCACGGCTCCACCGTCCCATCTCCGTCCAAATCGGGGCTGAGGTCGCGGTGGCCGCATACACGGGCGTTCCGGAACTGTTGTAGCAGCTGGTACACCAGCAGGTGCAG + BBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF The first 2 entries of example.r2.fastq file:\n@D00170:57:CA2R8ANXX:4:1101:10005:81687/2 AGAGGCTAAACAAAAATTAGCAGAGTCAAACTTAAGATTAGTTGTAAGTATTGCTAAAAAATATGTTGGAAGAGGAATGCTATTCTTAGATTTAATACAAGAAGGTAACATGGGTCTTATAAAAGC + BBBBBFFBFFFFFFFFFFFFFFBFFFFFFFF\u0026lt;/FFFFFFF/\u0026lt;F\u0026lt;F/FBF\u0026lt;\u0026lt;FFF/FFFBF\u0026lt;\u0026lt;F\u0026lt;FBBBF/BBBBBFBBFFFFFFFF/B\u0026lt;BBFFFFFFFFBF/FFFBBFFFF/FFFFFF\u0026lt;FF/7\u0026lt;B/ @D00170:57:CA2R8ANXX:4:1101:10024:71656/2 GAAGGCGGGCTGGATGCCCGGGGAAATCCGAAGGATACCCGTACGCCGGAGCAGCATTCGGCCCTGCACCTGCTGGTGTACCAGCTGCTACAACAGTTCCGGAACGCCCGTGTATGCGGCCACCGC + BBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF Note in the example above that sequence @D00170:57:CA2R8ANXX:4:1101:10005:81687 has read-1 ordered in the example.r1.fastq file corresponding to read-2 in the example.r2.fastq file, as indicated by the /r1 and /r2 suffixes, respectively.\nuBAM File It is not uncommon for unmapped FASTQ files to be stored in the BAM format simply to take advantage of its file compression format and save disk space. If your started point is such an unmapped BAM (uBAM) file, where read pairs are stored in the BAM format, you may feed ViroMatch a single uBAM file as --input when running the pipeline. ViroMatch will automatically convert the BAM file into constituent FASTQ read files (R1 \u0026amp; R2) while executing the pipeline.\nFor those running ViroMatch at Washington University School of Medicine through the compute1 high performance computing server, your input will almost always be the uBAM format.\n For an in-depth overview of the SAM/BAM file specification please visit the SAM/BAM and related specifications page or samtools/hts-specs repository.\nWithin the larger ViroMatch command, the --input argument for a BAM would look something like this.\nviromatch --input example.bam BAM files are not directly human-readable but can be viewed using Samtools software.\nNCBI nt Files    Argument Type Description     --nt file path(s) Space delimited list of paths to ViroMatch\u0026rsquo;s split NCBI nt nucleotide indexed FASTA files. Alternatively, a file with paths to the files, one per line, can be supplied instead, provided the file has a .fofn suffix \u0026mdash; e.g. NT.fofn file.    Command Line List (nt) The NCBI nt reference database is too large to pragmatically facilitate direct alignments without considerable computational resources. Therefore, we have split nt into multiple parts for iterative processing. The --nt argument points ViroMatch to where the split and indexed nt reference files reside on your system. File paths should be fully qualified and not rely on relative paths.\nWe may pass these files directly on the command line when running the pipeline, space-delimited. Within the larger ViroMatch command, the --nt argument for FASTQ files would look something like this.\nviromatch --nt /databases/ncbi/nt/nt-1.fna /databases/ncbi/nt/nt-2.fna /databases/ncbi/nt/nt-3.fna /databases/ncbi/nt/nt-4.fna /databases/ncbi/nt/nt-5.fna /databases/ncbi/nt/nt-6.fna /databases/ncbi/nt/nt-7.fna /databases/ncbi/nt/nt-8.fna /databases/ncbi/nt/nt-9.fna /databases/ncbi/nt/nt-10.fna /databases/ncbi/nt/nt-11.fna /databases/ncbi/nt/nt-12.fna /databases/ncbi/nt/nt-13.fna /databases/ncbi/nt/nt-14.fna /databases/ncbi/nt/nt-15.fna /databases/ncbi/nt/nt-16.fna /databases/ncbi/nt/nt-17.fna /databases/ncbi/nt/nt-18.fna /databases/ncbi/nt/nt-19.fna /databases/ncbi/nt/nt-20.fna /databases/ncbi/nt/nt-21.fna /databases/ncbi/nt/nt-22.fna /databases/ncbi/nt/nt-23.fna /databases/ncbi/nt/nt-24.fna /databases/ncbi/nt/nt-25.fna /databases/ncbi/nt/nt-26.fna /databases/ncbi/nt/nt-27.fna /databases/ncbi/nt/nt-28.fna /databases/ncbi/nt/nt-29.fna /databases/ncbi/nt/nt-30.fna /databases/ncbi/nt/nt-31.fna /databases/ncbi/nt/nt-32.fna /databases/ncbi/nt/nt-33.fna /databases/ncbi/nt/nt-34.fna /databases/ncbi/nt/nt-35.fna /databases/ncbi/nt/nt-36.fna /databases/ncbi/nt/nt-37.fna /databases/ncbi/nt/nt-38.fna /databases/ncbi/nt/nt-39.fna /databases/ncbi/nt/nt-40.fna /databases/ncbi/nt/nt-41.fna /databases/ncbi/nt/nt-42.fna /databases/ncbi/nt/nt-43.fna /databases/ncbi/nt/nt-44.fna /databases/ncbi/nt/nt-45.fna /databases/ncbi/nt/nt-46.fna /databases/ncbi/nt/nt-47.fna /databases/ncbi/nt/nt-48.fna /databases/ncbi/nt/nt-49.fna /databases/ncbi/nt/nt-50.fna /databases/ncbi/nt/nt-51.fna /databases/ncbi/nt/nt-52.fna /databases/ncbi/nt/nt-53.fna /databases/ncbi/nt/nt-54.fna /databases/ncbi/nt/nt-55.fna /databases/ncbi/nt/nt-56.fna /databases/ncbi/nt/nt-57.fna /databases/ncbi/nt/nt-58.fna /databases/ncbi/nt/nt-59.fna /databases/ncbi/nt/nt-60.fna /databases/ncbi/nt/nt-61.fna /databases/ncbi/nt/nt-62.fna /databases/ncbi/nt/nt-63.fna /databases/ncbi/nt/nt-64.fna /databases/ncbi/nt/nt-65.fna /databases/ncbi/nt/nt-66.fna /databases/ncbi/nt/nt-67.fna /databases/ncbi/nt/nt-68.fna /databases/ncbi/nt/nt-69.fna /databases/ncbi/nt/nt-70.fna /databases/ncbi/nt/nt-71.fna /databases/ncbi/nt/nt-72.fna /databases/ncbi/nt/nt-73.fna /databases/ncbi/nt/nt-74.fna Although we are pointing to the FASTA files in the above command, the corresponding indexed files should also be present on your system. For example, /databases/ncbi/nt/nt-1.fna should have the following files located along with the FASTA file.\n/databases/ncbi/nt/nt-1.fna /databases/ncbi/nt/nt-1.fna.amb /databases/ncbi/nt/nt-1.fna.ann /databases/ncbi/nt/nt-1.fna.bwt /databases/ncbi/nt/nt-1.fna.pac /databases/ncbi/nt/nt-1.fna.sa File of File Names (nt) In the above command line example, we passed all of the split and indexed nt database files on the command line as a list. As there are many split files, using this method makes the command line statement hard to read, and invites user error (e.g. accidentally omitting a split file). Therefore it is recommended that you supply the --nt argument a file of file names where each line is a fully qualified path to the nt FASTA files.\nYour file of file names file must end in a .fofn suffix.\n Although we are pointing to the FASTA files in the fofn file, the corresponding indexed files should also be present on your system as outlined above.\nWithin the larger ViroMatch command, the --nt argument for the file of file names would look something like this.\nviromatch --nt /databases/ncbi/nt/nt.fofn The nt.fofn file will contain the paths to all of the split NCBI nt files, like so.\n/databases/ncbi/nt/nt-1.fna /databases/ncbi/nt/nt-2.fna /databases/ncbi/nt/nt-3.fna /databases/ncbi/nt/nt-4.fna /databases/ncbi/nt/nt-5.fna /databases/ncbi/nt/nt-6.fna /databases/ncbi/nt/nt-7.fna /databases/ncbi/nt/nt-8.fna /databases/ncbi/nt/nt-9.fna /databases/ncbi/nt/nt-10.fna /databases/ncbi/nt/nt-11.fna /databases/ncbi/nt/nt-12.fna /databases/ncbi/nt/nt-13.fna /databases/ncbi/nt/nt-14.fna /databases/ncbi/nt/nt-15.fna /databases/ncbi/nt/nt-16.fna /databases/ncbi/nt/nt-17.fna /databases/ncbi/nt/nt-18.fna /databases/ncbi/nt/nt-19.fna /databases/ncbi/nt/nt-20.fna /databases/ncbi/nt/nt-21.fna /databases/ncbi/nt/nt-22.fna /databases/ncbi/nt/nt-23.fna /databases/ncbi/nt/nt-24.fna /databases/ncbi/nt/nt-25.fna /databases/ncbi/nt/nt-26.fna /databases/ncbi/nt/nt-27.fna /databases/ncbi/nt/nt-28.fna /databases/ncbi/nt/nt-29.fna /databases/ncbi/nt/nt-30.fna /databases/ncbi/nt/nt-31.fna /databases/ncbi/nt/nt-32.fna /databases/ncbi/nt/nt-33.fna /databases/ncbi/nt/nt-34.fna /databases/ncbi/nt/nt-35.fna /databases/ncbi/nt/nt-36.fna /databases/ncbi/nt/nt-37.fna /databases/ncbi/nt/nt-38.fna /databases/ncbi/nt/nt-39.fna /databases/ncbi/nt/nt-40.fna /databases/ncbi/nt/nt-41.fna /databases/ncbi/nt/nt-42.fna /databases/ncbi/nt/nt-43.fna /databases/ncbi/nt/nt-44.fna /databases/ncbi/nt/nt-45.fna /databases/ncbi/nt/nt-46.fna /databases/ncbi/nt/nt-47.fna /databases/ncbi/nt/nt-48.fna /databases/ncbi/nt/nt-49.fna /databases/ncbi/nt/nt-50.fna /databases/ncbi/nt/nt-51.fna /databases/ncbi/nt/nt-52.fna /databases/ncbi/nt/nt-53.fna /databases/ncbi/nt/nt-54.fna /databases/ncbi/nt/nt-55.fna /databases/ncbi/nt/nt-56.fna /databases/ncbi/nt/nt-57.fna /databases/ncbi/nt/nt-58.fna /databases/ncbi/nt/nt-59.fna /databases/ncbi/nt/nt-60.fna /databases/ncbi/nt/nt-61.fna /databases/ncbi/nt/nt-62.fna /databases/ncbi/nt/nt-63.fna /databases/ncbi/nt/nt-64.fna /databases/ncbi/nt/nt-65.fna /databases/ncbi/nt/nt-66.fna /databases/ncbi/nt/nt-67.fna /databases/ncbi/nt/nt-68.fna /databases/ncbi/nt/nt-69.fna /databases/ncbi/nt/nt-70.fna /databases/ncbi/nt/nt-71.fna /databases/ncbi/nt/nt-72.fna /databases/ncbi/nt/nt-73.fna /databases/ncbi/nt/nt-74.fna NCBI nr Files    Argument Type Description     --nr file path(s) Space delimited list of paths to ViroMatch\u0026rsquo;s split NCBI nr nucleotide indexed FASTA files. Alternatively, a file with paths to the files, one per line, can be supplied instead, provided the file has a .fofn suffix \u0026mdash; e.g. NR.fofn file.    Command Line List (nr) The NCBI nr reference database is too large to pragmatically facilitate direct alignments without considerable computational resources. Therefore, we have split nt into multiple parts for iterative processing. The --nr argument points ViroMatch to where the split and indexed nr reference files reside on your system. File paths should be fully qualified and not rely on relative paths.\nWe may pass these files directly on the command line when running the pipeline, space-delimited. Within the larger ViroMatch command, the --nr argument for FASTQ files would look something like this.\nviromatch --nr /databases/ncbi/nr/nr-1.dmnd /databases/ncbi/nr/nr-2.dmnd /databases/ncbi/nr/nr-3.dmnd /databases/ncbi/nr/nr-4.dmnd /databases/ncbi/nr/nr-5.dmnd /databases/ncbi/nr/nr-6.dmnd /databases/ncbi/nr/nr-7.dmnd /databases/ncbi/nr/nr-8.dmnd /databases/ncbi/nr/nr-9.dmnd /databases/ncbi/nr/nr-10.dmnd /databases/ncbi/nr/nr-11.dmnd /databases/ncbi/nr/nr-12.dmnd /databases/ncbi/nr/nr-13.dmnd /databases/ncbi/nr/nr-14.dmnd /databases/ncbi/nr/nr-15.dmnd /databases/ncbi/nr/nr-16.dmnd /databases/ncbi/nr/nr-17.dmnd /databases/ncbi/nr/nr-18.dmnd /databases/ncbi/nr/nr-19.dmnd /databases/ncbi/nr/nr-20.dmnd /databases/ncbi/nr/nr-21.dmnd /databases/ncbi/nr/nr-22.dmnd /databases/ncbi/nr/nr-23.dmnd /databases/ncbi/nr/nr-24.dmnd /databases/ncbi/nr/nr-25.dmnd /databases/ncbi/nr/nr-26.dmnd /databases/ncbi/nr/nr-27.dmnd /databases/ncbi/nr/nr-28.dmnd /databases/ncbi/nr/nr-29.dmnd /databases/ncbi/nr/nr-30.dmnd /databases/ncbi/nr/nr-31.dmnd /databases/ncbi/nr/nr-32.dmnd /databases/ncbi/nr/nr-33.dmnd /databases/ncbi/nr/nr-34.dmnd /databases/ncbi/nr/nr-35.dmnd /databases/ncbi/nr/nr-36.dmnd /databases/ncbi/nr/nr-37.dmnd /databases/ncbi/nr/nr-38.dmnd /databases/ncbi/nr/nr-39.dmnd /databases/ncbi/nr/nr-40.dmnd File of File Names (nr) In the above command line example, we passed all of the split and indexed nr database files on the command line as a list. As there are many split files, using this method makes the command line statement hard to read, and invites user error (e.g. accidentally omitting a split file). Therefore it is recommended that you supply the --nr argument a file of file names where each line is a fully qualified path to the nt FASTA files.\nYour file of file names file must end in a .fofn suffix.\n Within the larger ViroMatch command, the --nr argument for the file of file names would look something like this.\nviromatch --nr /databases/ncbi/nr/nr.fofn The nr.fofn file will contain the paths to all of the split NCBI nr files, like so.\n/databases/ncbi/nr/nr-1.dmnd /databases/ncbi/nr/nr-2.dmnd /databases/ncbi/nr/nr-3.dmnd /databases/ncbi/nr/nr-4.dmnd /databases/ncbi/nr/nr-5.dmnd /databases/ncbi/nr/nr-6.dmnd /databases/ncbi/nr/nr-7.dmnd /databases/ncbi/nr/nr-8.dmnd /databases/ncbi/nr/nr-9.dmnd /databases/ncbi/nr/nr-10.dmnd /databases/ncbi/nr/nr-11.dmnd /databases/ncbi/nr/nr-12.dmnd /databases/ncbi/nr/nr-13.dmnd /databases/ncbi/nr/nr-14.dmnd /databases/ncbi/nr/nr-15.dmnd /databases/ncbi/nr/nr-16.dmnd /databases/ncbi/nr/nr-17.dmnd /databases/ncbi/nr/nr-18.dmnd /databases/ncbi/nr/nr-19.dmnd /databases/ncbi/nr/nr-20.dmnd /databases/ncbi/nr/nr-21.dmnd /databases/ncbi/nr/nr-22.dmnd /databases/ncbi/nr/nr-23.dmnd /databases/ncbi/nr/nr-24.dmnd /databases/ncbi/nr/nr-25.dmnd /databases/ncbi/nr/nr-26.dmnd /databases/ncbi/nr/nr-27.dmnd /databases/ncbi/nr/nr-28.dmnd /databases/ncbi/nr/nr-29.dmnd /databases/ncbi/nr/nr-30.dmnd /databases/ncbi/nr/nr-31.dmnd /databases/ncbi/nr/nr-32.dmnd /databases/ncbi/nr/nr-33.dmnd /databases/ncbi/nr/nr-34.dmnd /databases/ncbi/nr/nr-35.dmnd /databases/ncbi/nr/nr-36.dmnd /databases/ncbi/nr/nr-37.dmnd /databases/ncbi/nr/nr-38.dmnd /databases/ncbi/nr/nr-39.dmnd /databases/ncbi/nr/nr-40.dmnd Viralfna File    Argument Type Description     --viralfna file path Path to ViroMatch\u0026rsquo;s viral identity nucleotide indexed FASTA file. Putative viral identities come from this database prior to extended validation alignments.    The --viralfna argument points to the path where ViroMatch\u0026rsquo;s viral nucleotide database is installed on your system. File paths should be fully qualified and not rely on relative PATHS.\nWithin the larger ViroMatch command, the --viralfna argument for the viral nucleotide database would look something like this.\nviromatch --viralfna /databases/viral-only/nuc/ncbi_viral.fna Although we are pointing to the FASTA files in the above command, the corresponding indexed files should also be present on your system. For example, /databases/viral-only/nuc/ncbi_viral.fna should have the following files located along with the FASTA file.\n/databases/viral-only/nuc/ncbi_viral.fna /databases/viral-only/nuc/ncbi_viral.fna.amb /databases/viral-only/nuc/ncbi_viral.fna.ann /databases/viral-only/nuc/ncbi_viral.fna.bwt /databases/viral-only/nuc/ncbi_viral.fna.pac /databases/viral-only/nuc/ncbi_viral.fna.sa The viral nucleotide database ViroMatch uses has been formatted in a manner to expedite processing time. Reference sequences have had their associated NCBI taxon ids annotated on each reference\u0026rsquo;s FASTA header. Pre-associating the taxon ids speeds up taxonomy association within the pipeline considerably.\nIn the following reference example, the taxon id 1868221 can be used to lookup the full lineage for MK746103.1 accession id.\n\u0026gt;MK746103.1|1868221 Porcine circovirus 3 strain PCV3/CNF/Xinjiang-160/2018, complete genome TAGTATTACCCGGCACCTCGGAACCCGGATCCACGGAGGTCTGTAGGGAGAAAAAGTGGTATCCCATTATGGATGCTCCG CACCGTGTGAGTGGATATACCGGGCAGTGGATGATGAAGCGGCCTCGTGTTTTGATGCCGCAGGACGGGGACTGGATAAC TGAGTTTTTGTGGTGCTACGAGTGTCCTGAAGATAAGGACTTTTATTGTCATCCTATTCTAGGTCCGGAGGGAAAGCCCG AAACACAGGTGGTGTTTTACGATAAACAACTGGACCCCGACCGAGTGGGAATCTATTGTGGAGTGTGGAGGCAGTATAGC GAGATACCTTATTATCGGCAAAGAGGTTGGAAAAAGCGGTACCCCACACTTGCAAGGGTACGTGAATTTCAAGAACAAAA GGCGACTCAGCTCGGTGAAGCGCTTACCCGGATTTGGTCGGGCCCATCTGGAGCCGGCGAGGGGGAGCCACAAAGAGGCC AGCGAGTATTGCAAGAAAGAGGGGGATTACCTCGAGATTGGCGAAGATTCCTCTTCGGGTACCAGATCGGATCTTCAAGC AGCAGCTCGGATTCTGACGGAGACGGCGGGAAATCTGACTGAAGTTGCGGAGAAGATGCCTGCAGTATTTATACGCTATG GGCGGGGTTTGCGTGATTTTTGCGGGGTGATGGGGTTGGGTAAACCGCGTGATTTTAAAACTGAAGTTTATGTTTTTATT GGTCCTCCAGGATGCGGGAAAACGCGGGAAGCTTGTGCGGATGCGGCTGCGCGGGAATTGCAGTTGTATTTCAAGCCACG GGGGCCTTGGTGGGATGGTTATAATGGGGAGGGTGCTGTTATTTTGGATGATTTTTATGGGTGGGTTCCATTTGATGAAT TGCTGAGAATTGGGGACAGGTACCCTCTGAGGGTTCCTGTTAAGGGTGGGTTTGTTAATTTTGTGGCTAAGGTATTATAT ATTACTAGTAATGTTGTACCGGAGGAGTGGTATTCATCGGAGAATATTCGTGGAAAGTTGGAGGCCTTGTTTAGGAGGTT CACTAAGGTTGTTTGTTGGGGGGAGGGGGGGGTAAAGAAAGACATGGAGACAGTGTATCCAATAAACTATTGATTTTATT TGCACTTGTGTACAATTATTGCGTTGGGGTGGGGGTATTTATTGGGAGGGTGGGTGGGCAGCCCCCTAGCCACGGCTTGT CGCCCCCACCGAAGCATGTGGGGGATGGGGTCCCCACATGCGAGGGCGTTTACCTGTGCCCGCACCCGAAGCGCAGCGGG AGCGCGCGCGAGGGGACACGGCTTGTCGCCACCGGAGGGGTCAGATTTATATTTATTGTCACTTAGAGAACGGACTTGTA ACGAATCCAAACTTCTTTGGTGCCGTAGAAGTCTGTCATTCCAGTTTTTTCCGGGACATAAATGCTCCAAAGCAGTGCTC CCCATTGAACGGTGGGGTCATATGTGTTGAGCCATGGGGTGGGTCTGGAGAAAAAGAAGAGGCTTTGTCCTGGGTGAGTG CTGGTAGTTCCCGCCAGAATTGGTTTGGGGGTGAAGTAAAGGCTGTGTTTTCTTTTAGAAGTCATAACTTTACGAGTGGA ACTTTCCGCATAAGGGTCGTCTTGGAGCCAAGTGTTTGTGGTCCAGGCGCCGTCTAGATCTATGGCTGTGTGCCCGAACA TAGTTTTTGTTTGCTGAGCCGGAGAAATTACAGGGCTGAGTGTAACTTTCATCTTTAGTATCTTATAATATTCAAAGGTA ATTGCAGTTTCCCATTCGTTTAGGCGGGTAATGAAGTGGTTGGCGTGCCAGGGCTTGTTATTCTGAGGGGTTCCAACGGA TATGACGTTCATGGTGGAGTATTTCTTTGTGTAGTATGTGCCAGCTGTGGGCCTCCTAATGAATAGTCTTCTTCTGGCAT AGCGCCTTCTGTGGCGTCGTCGTCTCCTTGGGCGGGGTCTTCTTCTGAATATAGCTCTGTGTCTCATTTTGGTGCCGGGC Viralfaa File    Argument Type Description     --viralfaa file path Path to ViroMatch\u0026rsquo;s viral identity translated nucleotide indexed FASTA file. Putative viral identities come from this database prior to extended validation alignments.    The --viralfaa argument points to the path where ViroMatch\u0026rsquo;s viral translated nucleotide database is installed on your system. File paths should be fully qualified and not rely on relative paths.\nWithin the larger ViroMatch command, the --viralfaa argument for the viral nucleotide database would look something like this.\nviromatch --viralfna /databases/viral-only/trans_nuc/ncbi_viral.dmnd The translated viral nucleotide database ViroMatch uses is the exact same reference used in the --viralfna, but has been six-frame translated and indexed for translated alignments.\nThe translated viral nucleotide database ViroMatch uses has been formatted in a manner to expedite processing time. Reference sequences have had their associated NCBI taxon ids annotated on each reference\u0026rsquo;s FASTA header. Pre-associating the taxon ids speeds up taxonomy association within the pipeline considerably.\nIn the following reference example, the taxon id 1868221 can be used to lookup the full lineage for MK746103.1 accession id. Also, note there are now six entries due to six-frame translation.\n\u0026gt;MK746103.1|1868221|7_1 Porcine circovirus 3 strain PCV3/CNF/Xinjiang-160/2018, complete genome *YYPAPRNPDPRRSVGRKSGIPLWMLRTV*VDIPGSG**SGLVF*CRRTGTG*LSFCGAT SVLKIRTFIVILF*VRRESPKHRWCFTINNWTPTEWESIVECGGSIARYLIIGKEVGKSG TPHLQGYVNFKNKRRLSSVKRLPGFGRAHLEPARGSHKEASEYCKKEGDYLEIGEDSSSG TRSDLQAAARILTETAGNLTEVAEKMPAVFIRYGRGLRDFCGVMGLGKPRDFKTEVYVFI GPPGCGKTREACADAAARELQLYFKPRGPWWDGYNGEGAVILDDFYGWVPFDELLRIGDR YPLRVPVKGGFVNFVAKVLYITSNVVPEEWYSSENIRGKLEALFRRFTKVVCWGEGGVKK DMETVYPINY*FYLHLCTIIALGWGYLLGGWVGSPLATACRPHRSMWGMGSPHARAFTCA RTRSAAGARARGHGLSPPEGSDLYLLSLRERTCNESKLLWCRRSLSFQFFPGHKCSKAVL PIERWGHMC*AMGWVWRKRRGFVLGECW*FPPELVWG*SKGCVFF*KS*LYEWNFPHKGR LGAKCLWSRRRLDLWLCART*FLFAEPEKLQG*V*LSSLVSYNIQR*LQFPIRLGG**SG WRARACYSEGFQRI*RSWWSISLCSMCQLWAS**IVFFWHSAFCGVVVSLGGVFF*I*LC VSFWCRA \u0026gt;MK746103.1|1868221|7_2 Porcine circovirus 3 strain PCV3/CNF/Xinjiang-160/2018, complete genome SITRHLGTRIHGGL*GEKVVSHYGCSAPCEWIYRAVDDEAASCFDAAGRGLDN*VFVVLR VS*R*GLLLSSYSRSGGKARNTGGVLR*TTGPRPSGNLLWSVEAV*RDTLLSAKRLEKAV PHTCKGT*ISRTKGDSAR*SAYPDLVGPIWSRRGGATKRPASIARKRGITSRLAKIPLRV PDRIFKQQLGF*RRRREI*LKLRRRCLQYLYAMGGVCVIFAG*WGWVNRVILKLKFMFLL VLQDAGKRGKLVRMRLRGNCSCISSHGGLGGMVIMGRVLLFWMIFMGGFHLMNC*ELGTG TL*GFLLRVGLLILWLRYYILLVMLYRRSGIHRRIFVESWRPCLGGSLRLFVGGRGG*RK TWRQCIQ*TIDFICTCVQLLRWGGGIYWEGGWAAP*PRLVAPTEACGGWGPHMRGRLPVP APEAQRERARGDTACRHRRGQIYIYCHLENGLVTNPNFFGAVEVCHSSFFRDINAPKQCS PLNGGVICVEPWGGSGEKEEALSWVSAGSSRQNWFGGEVKAVFSFRSHNFTSGTFRIRVV LEPSVCGPGAV*IYGCVPEHSFCLLSRRNYRAECNFHL*YLIIFKGNCSFPFV*AGNEVV GVPGLVILRGSNGYDVHGGVFLCVVCASCGPPNE*SSSGIAPSVASSSPWAGSSSEYSSV SHFGAG \u0026gt;MK746103.1|1868221|7_3 Porcine circovirus 3 strain PCV3/CNF/Xinjiang-160/2018, complete genome VLPGTSEPGSTEVCREKKWYPIMDAPHRVSGYTGQWMMKRPRVLMPQDGDWITEFLWCYE CPEDKDFYCHPILGPEGKPETQVVFYDKQLDPDRVGIYCGVWRQYSEIPYYRQRGWKKRY PTLARVREFQEQKATQLGEALTRIWSGPSGAGEGEPQRGQRVLQERGGLPRDWRRFLFGY QIGSSSSSSDSDGDGGKSD*SCGEDACSIYTLWAGFA*FLRGDGVG*TA*F*N*SLCFYW SSRMRENAGSLCGCGCAGIAVVFQATGALVGWL*WGGCCYFG*FLWVGSI**IAENWGQV PSEGSC*GWVC*FCG*GIIYY**CCTGGVVFIGEYSWKVGGLV*EVH*GCLLGGGGGKER HGDSVSNKLLILFALVYNYCVGVGVFIGRVGGQPPSHGLSPPPKHVGDGVPTCEGVYLCP HPKRSGSAREGTRLVATGGVRFIFIVT*RTDL*RIQTSLVP*KSVIPVFSGT*MLQSSAP H*TVGSYVLSHGVGLEKKKRLCPG*VLVVPARIGLGVK*RLCFLLEVITLRVELSA*GSS WSQVFVVQAPSRSMAVCPNIVFVC*AGEITGLSVTFIFSIL*YSKVIAVSHSFRRVMKWL ACQGLLF*GVPTDMTFMVEYFFV*YVPAVGLLMNSLLLA*RLLWRRRLLGRGLLLNIALC LILVPG \u0026gt;MK746103.1|1868221|7_4 Porcine circovirus 3 strain PCV3/CNF/Xinjiang-160/2018, complete genome PAPK*DTELYSEEDPAQGDDDATEGAMPEEDYSLGGPQLAHTTQRNTPP*TSYPLEPLRI TSPGTPTTSLPA*TNGKLQLPLNIIRY*R*KLHSAL*FLRLSKQKLCSGTQP*I*TAPGP QTLGSKTTLMRKVPLVKL*LLKENTAFTSPPNQFWRELPALTQDKASSFSPDPPHGSTHM TPPFNGEHCFGAFMSRKKLE*QTSTAPKKFGFVTSPFSK*Q*I*I*PLRWRQAVSPRARS RCASGAGTGKRPRMWGPHPPHASVGATSRG*GAAHPPSQ*IPPPQRNNCTQVQIKSIVYW IHCLHVFLYPPLPPTNNLSEPPKQGLQLSTNILR*IPLLRYNITSNI*YLSHKINKPTLN RNPQRVPVPNSQQFIKWNPPIKIIQNNSTLPIITIPPRPPWLEIQLQFPRSRIRTSFPRF PASWRTNKNINFSFKITRFTQPHHPAKITQTPPIAYKYCRHLLRNFSQISRRLRQNPSCC LKIRSGTRRGIFANLEVIPLFLAILAGLFVAPPRRLQMGPTKSG*ALHRAESPFVLEIHV PLQVWGTAFSNLFADNKVSRYTASTLHNRFPLGRGPVVYRKTPPVFRAFPPDLE*DDNKS PYLQDTRSTTKTQLSSPRPAASKHEAASSSTARYIHSHGAEHP*WDTTFSPYRPPWIRVP RCRVIL \u0026gt;MK746103.1|1868221|7_5 Porcine circovirus 3 strain PCV3/CNF/Xinjiang-160/2018, complete genome PGTKMRHRAIFRRRPRPRRRRRHRRRYARRRLFIRRPTAGTYYTKKYSTMNVISVGTPQN NKPWHANHFITRLNEWETAITFEYYKILKMKVTLSPVISPAQQTKTMFGHTAIDLDGAWT TNTWLQDDPYAESSTRKVMTSKRKHSLYFTPKPILAGTTSTHPGQSLFFFSRPTPWLNTY DPTVQWGALLWSIYVPEKTGMTDFYGTKEVWIRYKSVL*VTININLTPPVATSRVPSRAL PLRFGCGHR*TPSHVGTPSPTCFGGGDKPWLGGCPPTLPINTPTPTQ*LYTSANKINSLL DTLSPCLSLPPPPPNKQP**TS*TRPPTFHEYSPMNTTPPVQHY**YIIP*PQN*QTHP* QEPSEGTCPQFSAIHQMEPTHKNHPK*QHPPHYNHPTKAPVA*NTTAIPAQPHPHKLPAF SRILEDQ*KHKLQF*NHAVYPTPSPRKNHANPAHSV*ILQASSPQLQSDFPPSPSESELL LEDPIWYPKRNLRQSRGNPPLSCNTRWPLCGSPSPAPDGPDQIRVSASPS*VAFCS*NSR TLASVGYRFFQPLCR**GISLYCLHTPQ*IPTRSGSSCLS*NTTCVSGFPSGPRIG*Q*K SLSSGHS*HHKNSVIQSPSCGIKTRGRFIIHCPVYPLTRCGASIMGYHFFSLQTSVDPGS EVPGNT \u0026gt;MK746103.1|1868221|7_6 Porcine circovirus 3 strain PCV3/CNF/Xinjiang-160/2018, complete genome ARHQNETQSYIQKKTPPKETTTPQKALCQKKTIH*EAHSWHILHKEILHHERHIRWNPSE *QALARQPLHYPPKRMGNCNYL*IL*DTKDESYTQPCNFSGSANKNYVRAHSHRSRRRLD HKHLAPRRPLCGKFHS*SYDF*KKTQPLLHPQTNSGGNYQHSPRTKPLLFLQTHPMAQHI *PHRSMGSTALEHLCPGKNWNDRLLRHQRSLDSLQVRSLSDNKYKSDPSGGDKPCPLARA PAALRVRAQVNALACGDPIPHMLRWGRQAVARGLPTHPPNKYPHPNAIIVHKCK*NQ*FI GYTVSMSFFTPPSPQQTTLVNLLNKASNFPRIFSDEYHSSGTTLLVIYNTLATKLTNPPL TGTLRGYLSPILSNSSNGTHP*KSSKITAPSPL*PSHQGPRGLKYNCNSRAAASAQASRV FPHPGGPIKT*TSVLKSRGLPNPITPQKSRKPRP*RINTAGIFSATSVRFPAVSVRIRAA A*RSDLVPEEESSPISR*SPSFLQYSLASLWLPLAGSRWARPNPGKRFTELSRLLFLKFT YPCKCGVPLFPTSLPIIRYLAILPPHSTIDSHSVGVQLFIVKHHLCFGLSLRT*NRMTIK VLIFRTLVAPQKLSYPVPVLRHQNTRPLHHPLPGISTHTVRSIHNGIPLFLPTDLRGSGF RGAG*Y Host File    Argument Type Description     --host file path Path to ViroMatch\u0026rsquo;s host indexed FASTA file used for host screening. By default we provide an indexed version of the human reference genome.    The ViroMatch pipeline performs host screening \u0026mdash; i.e. filters out reads based on identity to a reference host genome. All reads are host screened prior to viral (viralfna/viralfaa) assessment and NCBI nt/nr validation. If one read in a read-pair maps to a virus and the other maps to the host (e.g. an integrated virus), we want to remove the host read but not the viral hit; therefore, reads are aligned in single-end mode to the host genome.\nThe --host argument points to the path where ViroMatch\u0026rsquo;s host genome is installed on your system. ViroMatch provides an indexed version of the human genome.\nWithin the larger ViroMatch command, the --host argument for the host reference would look something like this.\nviromatch --host /databases/host/GRCh38_latest_genomic.fna Although we are pointing to the FASTA file in the above command, the corresponding indexed files should also be present on your system. For example, /databases/host/GRCh38_latest_genomic.fna should have the following files located along with the FASTA file.\n/databases/host/GRCh38_latest_genomic.fna /databases/host/GRCh38_latest_genomic.fna.amb /databases/host/GRCh38_latest_genomic.fna.ann /databases/host/GRCh38_latest_genomic.fna.bwt /databases/host/GRCh38_latest_genomic.fna.pac /databases/host/GRCh38_latest_genomic.fna.sa If you are not screening human but rather a different host genome, you will need to index the reference genome FASTA file yourself using the version of BWA-MEM included in the ViroMatch Docker image.\nFirst, create an interactive session using the ViroMatch Docker image. You will want to map the volume that contains your reference FASTA so Docker can see it. On your computer, change directory to where your reference FASTA file resides, then open the interactive session like so.\ndocker \\ container \\ run \\ -it \\ -v ${PWD}:/reference \\ twylie/viromatch:latest \\ zsh Once inside the interactive session, change to the directory where the reference FASTA file resides and index the reference FASTA using BWA.\ncd /reference bwa index example_reference.fasta Finally, you will pass --host the full path to the newly indexed reference FASTA file.\nIf you are going to index your own host genome, make sure to use the version of BWA in the ViroMatch Docker image, as that is the version used for mapping within the pipeline. Using different versions of BWA to index and map can result in odd behavior.\n Adaptor File    Argument Type Description     --adaptor file path Path to a file with adapter sequences, one per line, used for read trimming.    The --adaptor argument takes a qualified path to an adaptor file which will be used during the trimming phase of ViroMatch.\nWithin the larger ViroMatch command, the --adaptor argument for the adaptor file would look something like this.\nviromatch --adaptor /databases/adaptor/adaptor.fqtrim The adaptor file is simply a text file listing the adaptor sequences you wish to use for trimming.\nAGATCGGAAGAGCACA TGCTCTTCCGATCT GTTTCCCAGTCACGATA TATCGTGACTGGGAAAC ViroMatch uses fqtrim for trimming and the --adaptor file is passed directly to fqtrim. To learn more about fqtrim and its adaptor file format, take a look here, specifically the -f \u0026lt;filename\u0026gt; usage statement.\nYou will need to replace the adaptor file included in the Globus database download with a version specific for your sequence data and how it was produced \u0026mdash; e.g. library prep, adaptors, etc.\n Taxid File    Argument Type Description     --taxid file path Path to ViroMatch\u0026rsquo;s taxonomy database. This file provides NCBI-based taxonomy and lineages based on NCBI taxon ids.    The --taxid argument takes a qualified path to ViroMatch\u0026rsquo;s taxonomy file which will be used to define taxonomies for reads.\nWithin the larger ViroMatch command, the --taxid argument for the adaptor file would look something like this.\nviromatch --taxid /databases/taxonomy/taxonomy.tsv The --taxid file is a tab-delimited file that has mappings among NCBI taxon ids. Given a taxon id, we may recursively walk through all associated ids and construct the lineage for a given taxon id.\nFor example, take the following refernce genome:\nPseudomonas sp. SNU WT1 chromosome, complete genome\nwhich has 2518644 as the taxon id. Resolving this taxon id through the taxonomy.tsv file gives us the full lineage of this reference genome.\ncellular organisms --\u0026gt; Bacteria --\u0026gt; Proteobacteria --\u0026gt; Gammaproteobacteria --\u0026gt; Pseudomonadales --\u0026gt; Pseudomonadaceae --\u0026gt; Pseudomonas --\u0026gt; unclassified Pseudomonas --\u0026gt; Pseudomonas sp. SNU WT1 ViroMatch performs automatic taxonomic lookup for all candidate viral reads throughout the pipeline.\nWustlconfig File These options are only available to those running ViroMatch at Washington University School of Medicine through the compute1 high performance computing server.\n    Argument Type Description     --wustlconfig file path Path to a YAML configuration file used for WUSTL LSF job parallel processing. Variables provided in this file are used for LSF job submission configuration.    We provide --wustlconfig the full path to a YAML configuration file.\nWithin the larger ViroMatch command, the --wustlconfig argument for the YAML file would look something like this.\nviromatch --wustlconfig run.yaml The configuration file contains several parameters related to running parallel jobs on the WashU compute1 server. A single configuration file may be used to launch many instances of the ViroMatch pipeline, provided all of the sequence files are within directories covered by the Docker volumes list. A typical configuration file looks like this.\ndocker: image: \u0026#39;twylie/viromatch:latest\u0026#39; volumes: - \u0026#39;/storage1/fs1/tnwylie_lab/Active/viroMatchDatabases:/storage1/fs1/tnwylie_lab/Active/viroMatchDatabases\u0026#39; - \u0026#39;/storage1/fs1/twylie/Active/redoPP:/storage1/fs1/twylie/Active/redoPP\u0026#39; - \u0026#39;/storage1/fs1/twylie/RAW_DATA:/storage1/fs1/twylie/RAW_DATA\u0026#39; lsf: memory: \u0026#39;16G\u0026#39; results dir: \u0026#39;/storage1/fs1/twylie/Active/redoPP/results\u0026#39; cores: \u0026#39;150\u0026#39; local cores: \u0026#39;1\u0026#39; compute group: \u0026#39;compute-kwylie\u0026#39; queue: \u0026#39;general\u0026#39; latency wait: \u0026#39;100\u0026#39; restart times: \u0026#39;3\u0026#39; ignore hosts: - \u0026#39;compute1-exec-67.ris.wustl.edu\u0026#39; - \u0026#39;compute1-exec-117.ris.wustl.edu\u0026#39; - \u0026#39;compute1-exec-102.ris.wustl.edu\u0026#39; The configuration file is used only for sub-process (children) jobs submitted to LSF from the parent ViroMatch job.\n   Parameter Type Description     docker/image Required Name of the ViroMatch Docker image to use for sub-processing.   docker/volumes Required A list of all of the Docker volume mappings that will be needed for sub-processing.   lsf/memory Required Request the minimum amount of memory required for sub-processing.   lsf/results dir Required Where the viromatch_results/ directory will be written. This directory will be symbolically linked within the --outdir directory.   lsf/cores Required How many cores to use at one time for parallel sub-processing.   lsf/local cores Required How many local cores to address per each individual LSF sub-process job.   lsf/compute group Required LSF compute group name.   lsf/queue Required LSF submission queue name.   lsf/latency wait Required Time in seconds for how long Snakemake should wait for latent files. Useful for high latency cluster systems.   lsf/restart times Required How many times Snakemake should attempt to restart a failed sub-process.   lsf/ignore hosts Optional Some LSF execution nodes may be problematic. This list tells LSF to ignore these hosts when submitting sub-processes.    When running ViroMatch in parallel mode at Washington University School of Medicine, it is highly recommended to run the pipeline and its output on scratch1 disk space while writing the larger, computationally heavy output files on storage1 disk space. This ensures that Snakemake and its underlying process-monitoring code has access to fast disk space while the larger intermediate files created by the pipeline write to slower disks with more space. The results dir field in the config file should point to where you wish to write the larger output on storage1. A symbolic link will point to this area when the pipeline is executed on scratch1 space, within the --outdir directory under the viromatch_results/ symlink.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/overview/best_hit_logic/",
	"title": "Best Hit Logic",
	"tags": [],
	"description": "",
	"content": "Determining a Read\u0026rsquo;s Best Hit As outlined in NCBI nt Files and NCBI nr Files, the NCBI nt and nr reference databases are too large to index for alignment, so we split nt/nr into multiple indexed reference databases for independent alignment. Therefore, a candidate read will be aligned to all of the split nt or nr databases and a best hit will be determined during the best hit logic portion of the pipeline. While a read may have a good hit to one of the split reference databases, it may have a better or equally good hit to another split reference database.\nHaving multiple hits per read requires choosing a single best, representative hit for a read. Also, it is during this validation step that a read may have a better non-viral hit as compared to the initial viral-only database hit that flagged the read as a candidate for viral identity. All of the hits for a given read are evaluated at the same time in a read block. A read block is a list of alignment report lines, all having the same read id. In this way, we evaluate a smaller chunk of alignments at any one time. Although the alignment formats for nt and nr hits are different, the concept is the same. A read will be given the status of PASS or FAIL based on the underlying hits being evaluated. See Failure Codes for more details on read pass/fail evaluation.\nThe general logic for choosing a best hit for a read follows.\n  In the first evaluation for nucleotide alignments, we fail an entire read block (and the read) if the block\u0026rsquo;s best hit has a percent identity variance (pidv) score that is greater than --pid. For translated nucleotide alignments, we do not enforce a minimum percent identity score.\n  If the read block passes step #1 above, we then evaluate all of the hits in the read block. If a hit matches unknown or other sequences taxonomy, we ignore the hit, but quantify and report how many hits are affected. Other hits in the read block with known taxonomy are still evaluated.\n  The remaining hits are then placed into one of the following categories: 1) best hit score with viral-identity; 2) best hit score with non-viral-identity; 3) best hit neighbor with viral-identity; 4) best hit neighbor with non-viral-identity; 5) secondary, non-neighbor hits with any taxonomy.\n  We pool the best hit score with non-viral-identity and best hit neighbor with non-viral-identity hits and evaluate them. If there are any hits (\u0026gt;0 hits) in this pool, we fail the read block (and the read) because there are significant non-viral hits and the best viral-identity hit is therefore ambiguous. Neighbor reads are those hits that are within proximal range (--pidprox or --bitprox) to the best hit score.\n  If the read block passes step #4 above, we continue on with more hit evaluations. The best hit neighbor with viral-identity category was only used in separating viral and non-viral neighboring hits for evaluation. We make a note that these hits are viral neighbors in the sanity log files, but we fail these hits as they are not best hit candidates. We continue to evaluate the remaining hits in the read block.\n  The secondary, non-neighbor hits with any taxonomy are too distant from the best and neighboring hits, so these hits are failed. We continue to evaluate the remaining hits in the read block.\n  The remaining hit category in the read block is the best hit score with viral-identity hits. This may be a single hit or there may be multiple equally-scored hits in this pool of hits; however, they will all have viral taxonomy and be candidates for the best viral hit. If the hits are tied, a randomly selected representative hit will be chosen as the best viral hit. If there is a single best viral hit, it will be chosen by default.\n  At this point, the read block has been assessed and a pass or fail status is awarded to the parent read. A pass means that a best viral-identity hit was chosen for the read and the read will be counted in the taxonomy/quantification reports. A fail means that no significant viral-identity hit was chosen for the read and the read will not be included in the taxonomy/quantification reports.\n  The process continues (the next read block in the hits file is evaluated) iteratively until all of the reads and their hits have been evaluated.\n  For examples of evaluated reads, as well as a table of all possible pass/fail codes, see Sanity files.\n"
},
{
	"uri": "https://twylie.github.io/viromatch/overview/reports/",
	"title": "Reports and Output Files",
	"tags": [],
	"description": "",
	"content": "Top-Level Structure When the ViroMatch pipeline finishes, all output will be in the directory specified by the --output argument. Contents of this area will look like the following.\nCONFIG.yaml REPORT.nuc_ambiguous_counts.txt REPORT.nuc_counts.txt REPORT.trans_nuc_ambiguous_counts.txt REPORT.trans_nuc_counts.txt Snakefile cmd.sh stats.log steps.txt viromatch_results/ Here is a breakdown of this area.\n   File/Directory Description     .snakemake This directory contains information written by Snakemake during its execution.   CONFIG.yaml This file contains all of the configuration information required to run ViroMatch and is used directly by Snakmake to execute the pipeline. Command line parameters are captured here.   REPORT.nuc_ambiguous_counts.txt Final virus read counts and taxonomy based on nucleotide reference mappings. See below for detailed explanation.   REPORT.nuc_counts.txt Final virus read counts and taxonomy based on translated nucleotide reference mappings. See below for detailed explanation.   REPORT.trans_nuc_ambiguous_counts.txt Rejected hits/taxonomy based on nucleotide reference mappings. See below for detailed explanation   REPORT.trans_nuc_counts.txt Rejected hits/taxonomy based on translated nucleotide reference mappings. See below for detailed explanation.   Snakefile The Snakemake file that executes the steps in the ViroMatch pipeline. Can also be executed using Snakemake directly.   cmd.sh The shell script that ViroMatch uses to automatically execute the Snakemake pipeline.   stats.log Upon completion of the pipeline, Snakemake will write a benchmark file outlining runtime per pipeline step.   steps.txt The rules (steps) in the pipeline, as executed by Snakemake.   viromatch_results/ This directory contains all of the ancillary directories and files ViroMatch writes during pipeline processing.    The viromatch_results/ Directory This directory contains all of the ancillary directories and files ViroMatch writes during pipeline processing. Each rule (step) in the pipeline will have its own directory written here. The directory structure of a successful run will looks as follows.\nviromatch_results/.viromatch/ viromatch_results/blank_eval_filter_low_complexity/ viromatch_results/blank_eval_validate_trans_nuc_nr/ viromatch_results/blank_eval_viral_trans_nuc/ viromatch_results/copy_nuc_ambiguous_report/ viromatch_results/copy_nuc_nt_report/ viromatch_results/copy_trans_nuc_ambiguous_report/ viromatch_results/copy_trans_nuc_nr_report/ viromatch_results/filter_low_complexity_fastq_files/ viromatch_results/host_screen_mapping/ viromatch_results/host_screen_write_unmapped_bam/ viromatch_results/host_screen_write_unmapped_fastq/ viromatch_results/nuc_nt_best_hit_count_prep/ viromatch_results/nuc_nt_best_hit_counts/ viromatch_results/nuc_nt_best_hit_filter_sam/ viromatch_results/nuc_nt_otherseq_hit_report/ viromatch_results/nuc_nt_unknown_hit_report/ viromatch_results/prep_fastq_files/ viromatch_results/trans_nuc_nr_best_hit_count_prep/ viromatch_results/trans_nuc_nr_best_hit_counts/ viromatch_results/trans_nuc_nr_best_hit_filter_tsv/ viromatch_results/trans_nuc_nr_otherseq_hit_report/ viromatch_results/trans_nuc_nr_unknown_hit_report/ viromatch_results/trim_fastq_files/ viromatch_results/validate_nuc_nt_mapping/ viromatch_results/validate_nuc_nt_merge_r1_mapped_sam/ viromatch_results/validate_nuc_nt_merge_r2_mapped_sam/ viromatch_results/validate_nuc_nt_write_mapped_sam/ viromatch_results/validate_nuc_nt_write_merged_unmapped_fastq/ viromatch_results/validate_nuc_nt_write_r1_unmapped_ids/ viromatch_results/validate_nuc_nt_write_r2_unmapped_ids/ viromatch_results/validate_nuc_nt_write_unmapped_sam/ viromatch_results/validate_trans_nuc_nr_mapping/ viromatch_results/validate_trans_nuc_nr_mapping_daa_to_tsv/ viromatch_results/validate_trans_nuc_nr_merge_r1_mapped_tsv/ viromatch_results/validate_trans_nuc_nr_merge_r2_mapped_tsv/ viromatch_results/viral_mapped_fastq_merge/ viromatch_results/viral_nuc_mapping/ viromatch_results/viral_nuc_write_mapped_bam/ viromatch_results/viral_nuc_write_mapped_fastq/ viromatch_results/viral_nuc_write_unmapped_bam/ viromatch_results/viral_nuc_write_unmapped_fastq/ viromatch_results/viral_trans_nuc_daa_to_tsv/ viromatch_results/viral_trans_nuc_extract_mapped_ids/ viromatch_results/viral_trans_nuc_mapping/ viromatch_results/viral_trans_nuc_write_mapped_fastq/  ViroMatch writes several internal files in the .viromatch directory during processing. Information collected here includes benchmark files for individual steps and log files for steps that run executables that generate their own output.\n As ViroMatch progresses through pipeline execution, each step will create an underlying directory based on the step\u0026rsquo;s name and processing specific to the step will occur in this area. For example, if we wanted to see the exact commands related to the viral_nuc_mapping step, we would look in the viromatch_results/viral_nuc_mapping/ directory.\nviromatch_results/viral_nuc_mapping/INPUT.r1.viral.sam.cmd viromatch_results/viral_nuc_mapping/INPUT.r2.viral.sam.cmd There are two shell scripts, one for R1 reads and another for R2 reads, that run the specific commands to align FASTQ to the viral nucleotide reference database using BWA-MEM.\ncat viromatch_results/viral_nuc_mapping/INPUT.r1.viral.sam.cmd Results:\nbwa mem /viralfna/2014_12_29_complete_viral_genomes.fasta viromatch_results/host_screen_write_unmapped_fastq/INPUT.r1.host.unmapped.fastq \u0026gt; viromatch_results/viral_nuc_mapping/INPUT.r1.viral.sam 2\u0026gt; viromatch_results/.viromatch/log/INPUT.r1.viral.sam.log cat viromatch_results/viral_nuc_mapping/INPUT.r2.viral.sam.cmd Results:\nbwa mem /viralfna/2014_12_29_complete_viral_genomes.fasta viromatch_results/host_screen_write_unmapped_fastq/INPUT.r2.host.unmapped.fastq \u0026gt; viromatch_results/viral_nuc_mapping/INPUT.r2.viral.sam 2\u0026gt; viromatch_results/.viromatch/log/INPUT.r2.viral.sam.log All ViroMatch processing is done by Snakemake executing individual shell scripts along the pipeline. Therefore, it is relatively easy to see exactly what commands are being run throughout the pipeline. Once a run is finished, you can list all of the underlying shell scripts with the following command.\nfind viromatch_results/* -type f | grep \u0026#39;.cmd$\u0026#39; To see the order of execution for the shell commands, you will just need to look at the Snakemake log files that were generated during pipeline execution.\nls .snakemake/log/* .snakemake/log/2020-10-27T183639.808528.snakemake.log .snakemake/log/2020-10-27T183640.109481.snakemake.log One of the logs simply lists the rules/steps in the pipeline in order of execution defined by Snakemake, the other log is written during actual pipeline line execution. You will see the order of execution here for each rule, the associated directory being writte under viromatch_results/, input and output files for the rule, and the specific shell script being used for execution.\nSanity Files By default, ViroMatch removes temporary files generated during execution when they are no longer needed for downstream processing. This is done to save disk space, as many of the temporary files can be large in size. Therefore, not all of the files generated during processing will be under viromatch_results/ unless the user specifies the --keep argument when executing the pipeline.\n Using the --keep switch when executing the pipeline retains all of the files generated during processing. There are several useful \u0026ldquo;sanity\u0026rdquo; files that are generated within the pipeline , but be warned they can be very large in size!\nWhile retaining all of the pipeline files provides additional information for every command executed in the pipeline, some files are more important than others in reviewing pipeline decisions. Of particular interest are the pass/fail sanity files. These files provide the pass/fail status for every read evaluated in the pipeline, including the reason why a read might fail. While the read count report files provide viral hit/taxonomy counts, the pass/fail sanity files provide information on why or why not a read was counted.\nThe pass/fail sanity files are located here.\nviromatch_results/nuc_nt_best_hit_filter_sam/INPUT.r1.validate.nuc.mapped.filter.pass.sam.log viromatch_results/nuc_nt_best_hit_filter_sam/INPUT.r1.validate.nuc.mapped.filter.pass.sam.log.unknown viromatch_results/nuc_nt_best_hit_filter_sam/INPUT.r1.validate.nuc.mapped.filter.pass.sam.log.otherseq viromatch_results/nuc_nt_best_hit_filter_sam/INPUT.r2.validate.nuc.mapped.filter.pass.sam.log viromatch_results/nuc_nt_best_hit_filter_sam/INPUT.r2.validate.nuc.mapped.filter.pass.sam.log.unknown viromatch_results/nuc_nt_best_hit_filter_sam/INPUT.r2.validate.nuc.mapped.filter.pass.sam.log.otherseq viromatch_results/trans_nuc_nr_best_hit_filter_tsv/INPUT.r1.validate.trans.nuc.mapped.filter.pass.tsv.log viromatch_results/trans_nuc_nr_best_hit_filter_tsv/INPUT.r1.validate.trans.nuc.mapped.filter.pass.tsv.log.unknown viromatch_results/trans_nuc_nr_best_hit_filter_tsv/INPUT.r1.validate.trans.nuc.mapped.filter.pass.tsv.log.otherseq viromatch_results/trans_nuc_nr_best_hit_filter_tsv/INPUT.r2.validate.trans.nuc.mapped.filter.pass.tsv.log viromatch_results/trans_nuc_nr_best_hit_filter_tsv/INPUT.r2.validate.trans.nuc.mapped.filter.pass.tsv.log.unknown viromatch_results/trans_nuc_nr_best_hit_filter_tsv/INPUT.r2.validate.trans.nuc.mapped.filter.pass.tsv.log.otherseq There are sanity files for both nucleotide mapping and translated nucleotide mapping, both broken down into R1 and R2 reads.\nThe *.unknown and *.otherseq sanity files partition ambiguous hits that have been removed from consideration. See Ambiguous Counts for more details.\nSanity Examples Using INPUT.r1.validate.nuc.mapped.filter.pass.sam.log as an example, the associated fields in the file are as follows.\n   Field Description     pass/fail Pass/fail status for the hit. If passed, the read/hit was counted as a viral identity.   code Discrete pass/fail code, associated with the best hit logic in the pipeline.   read block size How many hits per read were considered for the read.   read id Associated sequence id for the read (from uBAM or FASTQ files).   comment Comment related to the pass/fail status.   pid Percent identity variance of the read (query) as compared to the reference hit (subject).   acc id Accession id of the reference hit.   species Species of the reference hit.   lineage Full lineage of the reference hit.    An example of a single failed hit.\n   Field Description     pass/fail FAIL   code TIED BEST HIT   read block size 2   read id D00170:57:CA2R8ANXX:4:2315:8200:2670   comment failed best hit (tied)   pid 0.0397   acc id KF294862.1   species Gyrovirus Tu789   lineage Viruses \u0026ndash;\u0026gt; Anelloviridae \u0026ndash;\u0026gt; Gyrovirus \u0026ndash;\u0026gt; unclassified Gyrovirus \u0026ndash;\u0026gt; Gyrovirus Tu789    In the above example, the sequence read D00170:57:CA2R8ANXX:4:2315:8200:2670 had a hit to the KF294862.1 reference genome (Gyrovirus Tu789) with 3.97% variance. While this is an acceptable hit \u0026mdash; e.g. hits a known virus with acceptable percent identity \u0026mdash; there are 2 hits associated with this read. The other hit also was equally acceptable. In such cases, when hits are equivalent, the pipeline randomly chooses the best hit. As indicated, this hit was (randomly) failed and the other hit was the best hit for the read.\nLet\u0026rsquo;s look at a more complicated example. Here is a read block (i.e. all the hits being evaluated for a single read).\n   Pass/Fail Code Read Block Size Read ID Comment PIDV Accc ID Species Lineage     PASS BEST HIT 8 A00584:317:HG3LNDSXY:4:1404:2465:7639 best hit 0.0066 MH648893.1 Anelloviridae sp. Viruses \u0026ndash;\u0026gt; Anelloviridae \u0026ndash;\u0026gt; unclassified Anelloviridae \u0026ndash;\u0026gt; Anelloviridae sp.   FAIL NEIGHBOR 8 A00584:317:HG3LNDSXY:4:1404:2465:7639 viral neighbor hit 0.0199 KM593803.2 SEN virus Viruses \u0026ndash;\u0026gt; Anelloviridae \u0026ndash;\u0026gt; unclassified Anelloviridae \u0026ndash;\u0026gt; SEN virus   FAIL SECONDARY NN 8 A00584:317:HG3LNDSXY:4:1404:2465:7639 secondary, non-neighbor hit 0.0993 FM882010.1 Torque teno virus Viruses \u0026ndash;\u0026gt; Anelloviridae \u0026ndash;\u0026gt; unclassified Anelloviridae \u0026ndash;\u0026gt; Torque teno virus   FAIL SECONDARY NN 8 A00584:317:HG3LNDSXY:4:1404:2465:7639 secondary, non-neighbor hit 0.1523 AY206683.1 SEN virus Viruses \u0026ndash;\u0026gt; Anelloviridae \u0026ndash;\u0026gt; unclassified Anelloviridae \u0026ndash;\u0026gt; SEN virus   FAIL SECONDARY NN 8 A00584:317:HG3LNDSXY:4:1404:2465:7639 secondary, non-neighbor hit 0.2914 AB059353.1 SEN virus Viruses \u0026ndash;\u0026gt; Anelloviridae \u0026ndash;\u0026gt; unclassified Anelloviridae \u0026ndash;\u0026gt; SEN virus   FAIL SECONDARY NN 8 A00584:317:HG3LNDSXY:4:1404:2465:7639 secondary, non-neighbor hit 0.5497 GQ179972.1 SEN virus Viruses \u0026ndash;\u0026gt; Anelloviridae \u0026ndash;\u0026gt; unclassified Anelloviridae \u0026ndash;\u0026gt; SEN virus   FAIL SECONDARY NN 8 A00584:317:HG3LNDSXY:4:1404:2465:7639 secondary, non-neighbor hit 0.5686 MK820646.1 Torque teno virus Viruses \u0026ndash;\u0026gt; Anelloviridae \u0026ndash;\u0026gt; unclassified Anelloviridae \u0026ndash;\u0026gt; Torque teno virus   FAIL SECONDARY NN 8 A00584:317:HG3LNDSXY:4:1404:2465:7639 secondary, non-neighbor hit 0.6291 AB856070.1 SEN virus Viruses \u0026ndash;\u0026gt; Anelloviridae \u0026ndash;\u0026gt; unclassified Anelloviridae \u0026ndash;\u0026gt; SEN virus    There are 8 total hits for the read, all hitting viral taxonomy; therefore, the best hit is chosen based on the best percent identity variance (pidv) value (0.0066 for MH648893.1). Note, the second best hit has a pidv value of 0.0199 to a viral identity, within the the default --pidprox value of 0.04 for \u0026ldquo;neighbor\u0026rdquo; status, so the failure code is labeled NEIGHBOR. The other viral hits are too distant from the --pidprox value, so their failure codes are SECONDARY NN for secondary, non-neighbor hits.\nIn the next example, we have a read block with 13 total hits.\n   Pass/Fail Code Read Block Size Read ID Comment PIDV Accc ID Species Lineage     FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.007 LT908445.1 Spodoptera aff. frugiperda 2 RZ-2014 cellular organisms \u0026ndash;\u0026gt; Eukaryota \u0026ndash;\u0026gt; Opisthokonta \u0026ndash;\u0026gt; Metazoa \u0026ndash;\u0026gt; Eumetazoa \u0026ndash;\u0026gt; Bilateria \u0026ndash;\u0026gt; Protostomia \u0026ndash;\u0026gt; Ecdysozoa \u0026ndash;\u0026gt; Panarthropoda \u0026ndash;\u0026gt; Arthropoda \u0026ndash;\u0026gt; Mandibulata \u0026ndash;\u0026gt; Pancrustacea \u0026ndash;\u0026gt; Hexapoda \u0026ndash;\u0026gt; Insecta \u0026ndash;\u0026gt; Dicondylia \u0026ndash;\u0026gt; Pterygota \u0026ndash;\u0026gt; Neoptera \u0026ndash;\u0026gt; Holometabola \u0026ndash;\u0026gt; Amphiesmenoptera \u0026ndash;\u0026gt; Lepidoptera \u0026ndash;\u0026gt; Glossata \u0026ndash;\u0026gt; Neolepidoptera \u0026ndash;\u0026gt; Heteroneura \u0026ndash;\u0026gt; Ditrysia \u0026ndash;\u0026gt; Obtectomera \u0026ndash;\u0026gt; Noctuoidea \u0026ndash;\u0026gt; Noctuidae \u0026ndash;\u0026gt; Amphipyrinae \u0026ndash;\u0026gt; Spodoptera \u0026ndash;\u0026gt; Spodoptera aff. frugiperda 2 RZ-2014   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.007 M63414.1 Orgyia pseudotsugata single capsid nuclopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; unclassified Alphabaculovirus \u0026ndash;\u0026gt; Orgyia pseudotsugata single capsid nuclopolyhedrovirus   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.007 U75930.2 Orgyia pseudotsugata multiple nucleopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; Orgyia pseudotsugata multiple nucleopolyhedrovirus   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.0141 KP747440.1 Dasychira pudibunda nucleopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; Dasychira pudibunda nucleopolyhedrovirus   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.4859 EF207986.1 Antheraea pernyi nucleopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; Antheraea pernyi nucleopolyhedrovirus   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.4859 KY979487.1 Antheraea pernyi nucleopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; Antheraea pernyi nucleopolyhedrovirus \u0026ndash;\u0026gt; Antheraea proylei nucleopolyhedrovirus   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.4859 LC194889.1 Antheraea pernyi nucleopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; Antheraea pernyi nucleopolyhedrovirus   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.4859 LC375537.1 Antheraea yamamai nucleopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; unclassified Baculoviridae \u0026ndash;\u0026gt; Antheraea yamamai nucleopolyhedrovirus   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.4859 MH797002.1 Antheraea pernyi nucleopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; Antheraea pernyi nucleopolyhedrovirus \u0026ndash;\u0026gt; Antheraea proylei nucleopolyhedrovirus   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.6831 KJ631623.1 Condylorrhiza vestigialis MNPV Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; unclassified Alphabaculovirus \u0026ndash;\u0026gt; Condylorrhiza vestigialis MNPV   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.7746 AF368905.1 Anticarsia gemmatalis nucleopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; unclassified Alphabaculovirus \u0026ndash;\u0026gt; Anticarsia gemmatalis nucleopolyhedrovirus   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.7746 DQ813662.2 Anticarsia gemmatalis multiple nucleopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; Anticarsia gemmatalis multiple nucleopolyhedrovirus   FAIL RB AMBIGUITY 13 A00584:317:HG3LNDSXY:4:2646:2248:14935 significant ambiguous, non-viral hit 0.7746 MG746625.1 Anticarsia gemmatalis multiple nucleopolyhedrovirus Viruses \u0026ndash;\u0026gt; Baculoviridae \u0026ndash;\u0026gt; Alphabaculovirus \u0026ndash;\u0026gt; Anticarsia gemmatalis multiple nucleopolyhedrovirus    The hits above are a mixture of viral and non-viral identities. We have a tie for best pidv, namely 0.007 for hits to LT908445.1, M63414.1, and U75930.2. The LT908445.1 hit is to a non-viral species, therefore the entire read block is failed and the failure code RB AMBIGUITY for significant ambiguous, non-viral hit is applied to all of the hits.\nThe above examples walk through some of the failure codes encountered in the sanity files. See the Failure Codes section below for details regarding other hit failures.\nFailure Codes All possible pass/failure codes for the best hit logic portion of the pipeline are outlined below.\n   Pass/Fail Status Code Comment Description     FAIL NEIGHBOR viral neighbor hit The hit was viral in nature, the score was within the --pidprox or --bitprox value range, but another viral hit was chosen based on a better score.   FAIL RB AMBIGUITY significant ambiguous, non-viral hit If the best hits (or any neighbor hits within the --pidprox or --bitprox value range) are not viruses, we fail the entire read block.   FAIL RB PID best score X is \u0026gt; Y The best score in the read block is greater than the --pid value; we fail the entire read block. Specific to nucleotide alignments.   FAIL SECONDARY NN secondary, non-neighbor hit The hit is failed because it is greater than the --pidprox or --bitprox value.   FAILED TIED BEST HIT failed best hit (tied) The hit is viral and was tied for the best hit, but was not chosen during the random best hit selection.   IGNORED OTHER SEQ taxonomy matches \u0026lsquo;other sequences\u0026rsquo;, investigate If a hit\u0026rsquo;s lineage matches NCBI\u0026rsquo;s other sequences category, we ignore the hit, but quantify and report how many hits are affected.   IGNORED UNKNOWN TAXA superkingdom is unknown, investigate If a hit\u0026rsquo;s superkingdom is unknown or unclassified, we ignore the hit, but quantify and report how many hits are affected.   PASS BEST HIT best hit The hit is viral and the single best (non-tied) hit.   PASS RANDOM BEST HIT randomly chosen best hit (tied) The hit is viral and was tied for the best hit, and was randomly chosen within the tied best hits.    Taxonomy/Quantification Reports The ultimate purpose of the ViroMatch pipeline is to review metagenomic sequence reads and report hits to known viruses. Upon completion, ViroMatch will provide reports detailing viral taxonomic classification and quantification. All report files are at the top-level of the --outdir directory provided in the execution command, specifically:\nREPORT.nuc_counts.txt REPORT.trans_nuc_counts.txt REPORT.nuc_ambiguous_counts.txt REPORT.trans_nuc_ambiguous_counts.txt These reports are discussed in more detail below.\nNucleotide Counts The REPORT.nuc_counts.txt file reports read identities to viruses as provided by the nucleotide mapping portions of the ViroMatch pipeline. Reads tallied in this report have been assessed by alignment to the viral-only reference database, validation of candidate viral reads against the NCBI nt reference database, taxonomic classification, and finally assessment by best hit logic. Only reads that have passed all of these steps are considered viral identities.\nDownload Example Nucleotide Counts Report   The nucleotide counts report file consists of the following sections:\n   Section Description     Header The header section captures the ViroMatch configuration for the process that produced the attached report information. Pipeline parameters are listed here.   Lineage (R1 + R2) The lineage section provides a breakdown of viral read counts at the full lineage level \u0026mdash; i.e. all taxonomic categories as provided by NCBI. Fields for this table are read count, percent of reads represented, and full lineage. A cumulative total is also provided. For this section, counts are derived from both read pairs (R1 \u0026amp; R2) combined.   Genus (R1 + R2) The genus section provides a breakdown of viral read counts at genus-level taxonomy. Fields for this table are read count, percent of reads represented, and genus. A cumulative total is also provided. For this section, counts are derived from both read pairs (R1 \u0026amp; R2) combined. This is the same cumulative total as listed in the lineage section, but broken down by genus.   Species (R1 + R2) The species section provides a breakdown of viral read counts at species-level taxonomy. Fields for this table are read count, percent of reads represented, and species. A cumulative total is also provided. For this section, counts are derived from both read pairs (R1 \u0026amp; R2) combined. This is the same cumulative total as listed in the lineage and genus sections, but broken down by species.   Lineage (R1) The same information as outlined in the Lineage (R1 + R2) section, but representative of only the contributing R1 reads.   Genus (R1) The same information as outlined in the Genus (R1 + R2) section, but representative of only the contributing R1 reads.   Species (R1) The same information as outlined in the Species (R1 + R2) section, but representative of only the contributing R1 reads.   Lineage (R2) The same information as outlined in the Lineage (R1 + R2) section, but representative of only the contributing R2 reads.   Genus (R2) The same information as outlined in the Genus (R1 + R2) section, but representative of only the contributing R2 reads.   Species (R2) The same information as outlined in the Species (R1 + R2) section, but representative of only the contributing R2 reads.    Translated Nucleotide Counts The REPORT.trans_nuc_counts.txt file reports read identities to viruses as provided by the translated nucleotide mapping portions of the ViroMatch pipeline. Reads tallied in this report have been assessed by alignment to the viral-only translated reference database, validation of candidate viral reads against the NCBI nr reference database, taxonomic classification, and finally assessment by best hit logic. Only reads that have passed all of these steps are considered viral identities.\nDownload Example Translated Nucleotide Counts Report   Translated nucleotide viral identities are reads that failed to map significantly during the nucleotide mapping sections of the pipeline but have identity to translated nucleotide viral references; therefore, these counts are separate and distinct from those listed in the REPORT.trans_nuc_counts.txt report. Adding together the counts in the REPORT.nuc_counts.txt and REPORT.trans_nuc_counts.txt files gives the total viral read counts for a given sample. As reads are given the opportunity to map to nucleotide references before translated nucleotide references, translated nucleotide counts are often much lower in count when compared to nucleotide reference counts.\nThe translated nucleotide counts report file consists of the following sections:\n   Section Description     Header The header section captures the ViroMatch configuration for the process that produced the attached report information. Pipeline parameters are listed here.   Lineage (R1 + R2) The lineage section provides a breakdown of viral translated read counts at the full lineage level \u0026mdash; i.e. all taxonomic categories as provided by NCBI. Fields for this table are read count, percent of reads represented, and full lineage. A cumulative total is also provided. For this section, counts are derived from both read pairs (R1 \u0026amp; R2) combined.   Genus (R1 + R2) The genus section provides a breakdown of viral translated read counts at genus-level taxonomy. Fields for this table are read count, percent of reads represented, and genus. A cumulative total is also provided. For this section, counts are derived from both read pairs (R1 \u0026amp; R2) combined. This is the same cumulative total as listed in the lineage section, but broken down by genus.   Species (R1 + R2) The species section provides a breakdown of viral translated read counts at species-level taxonomy. Fields for this table are read count, percent of reads represented, and species. A cumulative total is also provided. For this section, counts are derived from both read pairs (R1 \u0026amp; R2) combined. This is the same cumulative total as listed in the lineage and genus sections, but broken down by species.   Lineage (R1) The same information as outlined in the Lineage (R1 + R2) section, but representative of only the contributing R1 reads.   Genus (R1) The same information as outlined in the Genus (R1 + R2) section, but representative of only the contributing R1 reads.   Species (R1) The same information as outlined in the Species (R1 + R2) section, but representative of only the contributing R1 reads.   Lineage (R2) The same information as outlined in the Lineage (R1 + R2) section, but representative of only the contributing R2 reads.   Genus (R2) The same information as outlined in the Genus (R1 + R2) section, but representative of only the contributing R2 reads.   Species (R2) The same information as outlined in the Species (R1 + R2) section, but representative of only the contributing R2 reads.    Ambiguous Counts The REPORT.nuc_ambiguous_counts.txt and REPORT.trans_nuc_ambiguous_counts.txt files report ambiguous hit identities encountered by the nucleotide and translated nucleotide mapping portions of the ViroMatch pipeline.\nDownload Example Nucleotide Ambiguous Report   Download Example Translated Nucleotide Ambiguous Report   In early tests of ViroMatch, we noticed that NCBI had questionable taxonomic classifications for some of their reference sequences, leading to misleading identities. Some reads were aligning to references that were: 1) reference sequences that NCBI designates as unclassified sequences; 2) other sequences consisting of cloning vector, synthetic constructs, or other artificial sequences.\nWhen a read has a hit to a reference whose superkingdom is Unknown, we can\u0026rsquo;t evaluate if the hit is a virus or non-viral, so we ignore/skip the hit; however, we quantify and report how many hits are affected in this manner from all of the reviewed sequences. The other sequences category has reference entries with partial viral sequences submitted as part of cloning vectors etc., which can lead to false negatives during the best hit logic phase of the pipeline. If a hit\u0026rsquo;s lineage matches NCBI\u0026rsquo;s other sequences category, we ignore the hit, but quantify and report how many hits are affected. These categories are now partitioned during ViroMatch classification reports as uknown and ambiguous hit counts, respectively.\nAmbiguous hit counts are reported for reference, but are never considered in the pipeline past the point of their initial taxonomic identification.\nIt is important to note that a single read can have hits to multiple references. During the best hit logic portion of the pipeline, we evaluate all of the hits for a single read as a read block, or all of the hits for the read. Removing hits for either other sequences or unknown taxonomy removes only those hits from the read block and leaves the other hits for further evaluation; therefore, ambiguous hit removal does not necessarily mean the read has been failed.\n The ambiguous nucleotide hit counts report files consist of the following sections:\n   Section Description     Other Sequences Header The header section captures the ViroMatch configuration for the process that produced the attached report information. Pipeline parameters are listed here.   Other Sequences Lineage (R1 + R2) The lineage section provides a breakdown of hit counts related to other sequences at the full lineage level \u0026mdash; i.e. all taxonomic categories as provided by NCBI. Fields for this table are hit count, percent of reads represented, and full lineage. A cumulative total is also provided. For this section, counts are derived from both read pairs (R1 \u0026amp; R2) combined.   Other Sequences Lineage (R1) The same information as outlined in the Other Sequences Lineage (R1 + R2) section, but representative of only the contributing R1 reads.   Other Sequences Lineage (R2) The same information as outlined in the Other Sequences lineage (R1 + R2) section, but representative of only the contributing R2 reads.   Unknown Header The header section captures the ViroMatch configuration for the process that produced the attached report information. Pipeline parameters are listed here.   Unknown Lineage (R1 + R2) The lineage section provides a breakdown of hit counts related to unknown at the full lineage level \u0026mdash; i.e. all taxonomic categories as provided by NCBI. Fields for this table are hit count, percent of reads represented, and full lineage. A cumulative total is also provided. For this section, counts are derived from both read pairs (R1 \u0026amp; R2) combined.   Unknown Lineage (R1) The same information as outlined in the Unknown Lineage (R1 + R2) section, but representative of only the contributing R1 reads.   Unknown Lineage (R2) The same information as outlined in the Unknown lineage (R1 + R2) section, but representative of only the contributing R2 reads.    "
},
{
	"uri": "https://twylie.github.io/viromatch/quick_start/install_and_execution/",
	"title": "Installation and Pipeline Execution",
	"tags": [],
	"description": "",
	"content": "Quick Start While the ViroMatch code base is hosted at https://github.com/twylie/viromatch, we only support using the official Docker image. Instructions follow for installing and running ViroMatch using Docker.\n Step 1: Input Sequences Gather your input sequences for processing. You may provide either (1) a single input unmapped BAM (uBAM) file or (2) paired FASTQ files. If paired FASTQ files are provided, the R1-file should be first followed by the R2-file, space delimited.\n Step 2: Download and Install Docker Desktop The ViroMatch pipeline, and all of its underlying code dependencies, are provided as a Docker image. Once you\u0026rsquo;ve installed Docker Desktop on your computer and have downloaded the ViroMatch Docker image, you will be able to run the pipeline containers.\nDownload Docker   Step 3: Download ViroMatch Docker Image Once you\u0026rsquo;ve installed Docker Desktop (and the Docker service is running on your system) you will be able to download and run the ViroMatch Docker image. Specifically, you want the viromatch:latest image.\nDownload ViroMatch   Step 4: Download Required ViroMatch Databases ViroMatch requires several specific databases (--host, --viralfna, --viralfaa, --nt, --nr) for processing. These databases have been pre-compiled and are available for download.\nBe aware the databases are quite large in cumulative size (~860 GB).\nDatabases are being hosting through Globus Connect. Globus Connect is free to install and use for users at non-profit research and education institutions. You will need to login to Globus to access the databases.\nDownload ViroMatch Databases Using Globus   Step 5: Run ViroMatch We can run ViroMatch via a Docker container using the command line. From a terminal, we would type the following to call the Docker container and run ViroMatch. Arguments will need to reflect your file paths and personal settings in order to run properly on your system.\ndocker \\ container run \\ -itd \\ -v devViroMatchSMK/t/data:/data \\ -v /tmp/myTest:/outdir \\ -v devViroMatchSMK/t/ncbi/nt:/nt \\ -v devViroMatchSMK/t/ncbi/nr:/nr \\ -v devViroMatchSMK/t/viral/viralfna:/viralfna \\ -v devViroMatchSMK/t/viral/viralfaa:/viralfaa \\ -v devViroMatchSMK/t/host:/host \\ -v devViroMatchSMK/t/adaptor:/adaptor \\ -v devViroMatchSMK/t/taxonomy:/taxonomy \\ twylie/viromatch:latest \\ viromatch \\ --sampleid \u0026#39;Sample 1\u0026#39; \\ --input /data/test.r1.fastq /data/test.r2.fastq \\ --outdir /outdir/myTest \\ --nt /nt/nt.fofn \\ --nr /nr/nr.fofn \\ --viralfna /viralfna/viral_genomes.fasta \\ --viralfaa /viralfaa/viral_genomes.dmnd \\ --host /host/human.fna \\ --adaptor /adaptor/adaptor.fqtrim \\ --taxid /taxonomy/taxonomy.tsv  Step 6: ViroMatch Report Review Upon completion, ViroMatch will provide reports detailing viral taxonomic classification and quantification. All report files are at the top-level of the --outdir directory provided in the execution command.\nResults:\nREPORT.nuc_ambiguous_counts.txt REPORT.nuc_counts.txt REPORT.trans_nuc_ambiguous_counts.txt REPORT.trans_nuc_counts.txt  "
},
{
	"uri": "https://twylie.github.io/viromatch/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "ViroMatch A computational pipeline for detection of viral reads from complex metagenomic data. The Virome The virome is the viral component of the microbiome. Viruses are a diverse group of microbes. They require a host cell for the production of new viral particles, but the hosts range from microbial to eukaryotic cells. There is no single gene that is common among the group. In fact, viral genomes are strikingly varied. They can be composed of DNA or RNA; double stranded or single stranded; positive sense or negative sense; non-segmented or segmented. The diversity in viruses adds complexity to genomic analysis of the virome. Next generation sequencing is well-suited to virome analysis, as it enables culture-independent assessment of any type of viral nucleic acid in samples ranging from sea water to human clinical samples. Sequencing allows the comprehensive characterization of the virome and discovery of novel viruses. We developed ViroMatch to analyze datasets of millions of short sequence reads to identify viral sequences.\n Figure. The components of the virome that can be characterized by metagenomic sequencing. Viruses are a diverse group of microbes. Virome composition can include viruses that are present in or infect eukaryotic or microbial cells. Viruses can be acutely pathogenic to the host or establish long-term persistent or chronic infections. Viral genomes can be composed of DNA or RNA, with genome sizes ranging from a few kilobases to megabases.\n Viral Sequence Identification The ViroMatch workflow incorporates both nucleotide and translated amino acid sequence alignment against a comprehensive database of viral reference genomes, which allows us the sensitivity to detect highly conserved and divergent viral sequences. Specifically, metagenomic sequences are first screened for putative viral reads by nucleotide alignment with BWA-MEM and translated alignment with Diamond against a database of viral genomes (downloaded from NCBI). This first screen is fast, but the hits include many false positives. Therefore, the putative viral hits are then aligned to the comprehensive NCBI nt nucleotide database using BWA-MEM and the comprehensive NCBI nr protein database using Diamond. Only sequences with an unambiguous alignment to a viral reference are counted as viral hits. Ambiguous hits (those that have alignments with similar scores to viruses and human, bacteria, etc.) are not counted. Ambiguous hits include those that map to repetitive regions that are not suitable for determining virus positivity. This pipeline has been used primarily for analysis of vertebrate viruses, including human viruses found in clinical samples.\nSite Map   1. Quick Start\n Installation and Pipeline Execution    2. Download and Installation\n Prerequisites Docker Download ViroMatch Databases    3. Running ViroMatch\n Mapping Docker Volumes Interactive Docker Command Line Docker Command Line Arguments    4. Pipeline Overview\n Pipeline Summary Snakemake Steps in the Pipeline Third-Party Tools Input File Types Best Hit Logic Reports and Output Files    5. Project Info\n Version Authors License Funding Disclaimer    "
},
{
	"uri": "https://twylie.github.io/viromatch/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://twylie.github.io/viromatch/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]